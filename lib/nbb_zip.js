import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var Nfb=new $APP.q(null,"make-node","make-node",-1550461835,null),Ofb=new $APP.q("clojure.zip","append-child","clojure.zip/append-child",-1333956306,null),Pfb=new $APP.q("clojure.zip","insert-child","clojure.zip/insert-child",-210602132,null),Qfb=new $APP.q("clojure.zip","end?","clojure.zip/end?",381053413,null),Rfb=new $APP.q(null,"lefts","lefts",1054400638,null),Sfb=new $APP.q("clojure.zip","node","clojure.zip/node",-1345203614,null),Tfb=new $APP.q("clojure.zip","edit","clojure.zip/edit",-442418038,
null),Ufb=new $APP.q("clojure.zip","zipper","clojure.zip/zipper",-571036006,null),Vfb=new $APP.q("clojure.zip","next","clojure.zip/next",-1526224397,null),Wfb=new $APP.q("clojure.zip","branch?","clojure.zip/branch?",-1006947869,null),Xfb=new $APP.q("clojure.zip","up","clojure.zip/up",1006365229,null),Yfb=new $APP.q("clojure.zip","children","clojure.zip/children",65376544,null),Zfb=new $APP.q("clojure.zip","leftmost","clojure.zip/leftmost",-1791272498,null),$fb=new $APP.q(null,"xml-zip","xml-zip",
-1566989793,null),agb=new $APP.q("clojure.zip","replace","clojure.zip/replace",413367034,null),bgb=new $APP.q("clojure.zip","path","clojure.zip/path",1758958974,null),cgb=new $APP.q("clojure.zip","rightmost","clojure.zip/rightmost",1799140158,null),dgb=new $APP.q("clojure.zip","xml-zip","clojure.zip/xml-zip",-925187274,null),egb=new $APP.q("clojure.zip","down","clojure.zip/down",1356031458,null),fgb=new $APP.q("clojure.zip","seq-zip","clojure.zip/seq-zip",-395973642,null),ggb=new $APP.q("clojure.zip",
"prev","clojure.zip/prev",-389017676,null),hgb=new $APP.q("clojure.zip","insert-right","clojure.zip/insert-right",194316302,null),igb=new $APP.q("clojure.zip","vector-zip","clojure.zip/vector-zip",986730862,null),jgb=new $APP.q(null,"zipper","zipper",-1153741331,null),kgb=new $APP.q("clojure.zip","left","clojure.zip/left",1740332703,null),lgb=new $APP.q("clojure.zip","root","clojure.zip/root",-1119588559,null),mgb=new $APP.q(null,"vector-zip","vector-zip",1075131029,null),ngb=new $APP.q("clojure.zip",
"remove","clojure.zip/remove",859584278,null),ogb=new $APP.q("clojure.zip","insert-left","clojure.zip/insert-left",1476893044,null),pgb=new $APP.q("clojure.zip","rights","clojure.zip/rights",1361118051,null),qgb=new $APP.q("clojure.zip","make-node","clojure.zip/make-node",-640223892,null),rgb=new $APP.q(null,"seq-zip","seq-zip",-2034709283,null),sgb=new $APP.q(null,"rights","rights",2003591322,null),tgb=new $APP.q("clojure.zip","right","clojure.zip/right",-1593586409,null),ugb=new $APP.q("clojure.zip",
"lefts","clojure.zip/lefts",538689815,null);var vgb=$APP.kN.h($APP.DCa,null),wgb=$APP.pu($APP.gi([$APP.te(jgb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.RG,$APP.XF,Nfb,$APP.BI],null))),$APP.N,"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],
null)),$APP.te($APP.eoa,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],null)),$APP.te($APP.KEa,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],null)),$APP.te($APP.pla,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,
2,5,$APP.J,[$APP.nK,$APP.ZC],null))),$APP.N,"Inserts the item as the right sibling of the node at this loc,\n  without moving"],null)),$APP.te($APP.sma,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null))),$APP.N,"Inserts the item as the left sibling of the node at this loc,\n without moving"],null)),$APP.te($APP.Mta,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns true if loc represents the end of a depth-first walk"],
null)),$APP.te($APP.pE,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the node at loc"],null)),$APP.te($APP.cK,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.pE],null))),$APP.N,"Replaces the node at this loc, without moving"],null)),$APP.te($APP.Zoa,new $APP.h(null,3,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.nK,$APP.BH,$APP.ik,$APP.RD],null))),$APP.N,"Replaces the node at this loc with the value of (f node args)",
$APP.lI,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,2,$APP.zJ,2,$APP.hJ,new $APP.H(null,1,5,$APP.J,[$APP.K($APP.nK,$APP.BH,$APP.RD)],null),$APP.W,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.nK,$APP.BH,$APP.ik,$APP.RD],null)),$APP.dF,$APP.K(null)],null)],null)),$APP.te(rgb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.BI],null))),$APP.N,"Returns a zipper for nested sequences, given a root sequence"],null)),$APP.te($APP.sI,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,
1,5,$APP.J,[$APP.nK],null))),$APP.N,"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],null)),$APP.te($fb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.BI],null))),$APP.N,"Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],null)),$APP.te(mgb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,
[$APP.BI],null))),$APP.N,"Returns a zipper for nested vectors, given a root vector"],null)),$APP.te(Nfb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.nK,$APP.pE,$APP.XF],null))),$APP.N,"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],null)),$APP.te($APP.RG,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns true if the node at loc is a branch"],
null)),$APP.te($APP.Lma,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the loc of the right sibling of the node at this loc, or nil"],null)),$APP.te($APP.mDa,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns a seq of nodes leading to this loc"],null)),$APP.te($APP.BI,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"zips all the way up and returns the root node, reflecting any\n changes."],
null)),$APP.te(sgb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns a seq of the right siblings of this loc"],null)),$APP.te($APP.XF,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns a seq of the children of node at loc, which must be a branch"],null)),$APP.te($APP.Bra,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the loc of the leftmost sibling of the node at this loc, or self"],
null)),$APP.te($APP.HDa,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],null)),$APP.te($APP.wAa,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the loc of the left sibling of the node at this loc, or nil"],null)),$APP.te(Rfb,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,
[$APP.nK],null))),$APP.N,"Returns a seq of the left siblings of this loc"],null)),$APP.te($APP.Bya,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null))),$APP.N,"Inserts the item as the leftmost child of the node at this loc,\n  without moving"],null)),$APP.te($APP.sxa,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null))),$APP.N,"Inserts the item as the rightmost child of the node at this loc,\n  without moving"],
null)),$APP.te($APP.$za,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Returns the loc of the rightmost sibling of the node at this loc, or self"],null)),$APP.te($APP.EA,new $APP.h(null,2,[$APP.W,$APP.K($APP.Ak,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null))),$APP.N,"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],null))],[new $APP.h(null,3,[$APP.Q,Ufb,$APP.ou,$APP.ix,$APP.mb,new $APP.h(null,
2,[$APP.W,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.RG,$APP.XF,Nfb,$APP.BI],null)),$APP.N,"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],null)],null),new $APP.h(null,
3,[$APP.Q,Xfb,$APP.ou,$APP.vx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],null)],null),new $APP.h(null,3,[$APP.Q,ggb,$APP.ou,$APP.ika,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],null)],null),new $APP.h(null,3,[$APP.Q,hgb,$APP.ou,
$APP.eka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null)),$APP.N,"Inserts the item as the right sibling of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.Q,ogb,$APP.ou,$APP.dka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null)),$APP.N,"Inserts the item as the left sibling of the node at this loc,\n without moving"],null)],null),new $APP.h(null,3,[$APP.Q,Qfb,$APP.ou,$APP.jka,$APP.mb,
new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns true if loc represents the end of a depth-first walk"],null)],null),new $APP.h(null,3,[$APP.Q,Sfb,$APP.ou,$APP.jx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the node at loc"],null)],null),new $APP.h(null,3,[$APP.Q,agb,$APP.ou,$APP.Ax,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.pE],null)),$APP.N,"Replaces the node at this loc, without moving"],
null)],null),new $APP.h(null,3,[$APP.Q,Tfb,$APP.ou,$APP.HN,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.nK,$APP.BH,$APP.ik,$APP.RD],null)),$APP.N,"Replaces the node at this loc with the value of (f node args)"],null)],null),new $APP.h(null,3,[$APP.Q,fgb,$APP.ou,function(a){return $APP.ix($APP.Le,$APP.gf,function(b,c){return $APP.te(c,$APP.ue(b))},a)},$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.BI],null)),$APP.N,"Returns a zipper for nested sequences, given a root sequence"],
null)],null),new $APP.h(null,3,[$APP.Q,Vfb,$APP.ou,$APP.hka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],null)],null),new $APP.h(null,3,[$APP.Q,dgb,$APP.ou,function(a){return $APP.ix($APP.sg($APP.Fb),$APP.sq.h($APP.r,$APP.hva),function(b,c){return $APP.xi.j(b,$APP.hva,$APP.k(c)?$APP.qg.h($APP.Kw,
c):c)},a)},$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.BI],null)),$APP.N,"Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],null)],null),new $APP.h(null,3,[$APP.Q,igb,$APP.ou,function(a){return $APP.ix($APP.Ee,$APP.r,function(b,c){return $APP.te($APP.ef(c),$APP.ue(b))},a)},$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.BI],null)),$APP.N,"Returns a zipper for nested vectors, given a root vector"],null)],null),new $APP.h(null,
3,[$APP.Q,qgb,$APP.ou,$APP.mx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.nK,$APP.pE,$APP.XF],null)),$APP.N,"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],null)],null),new $APP.h(null,3,[$APP.Q,Wfb,$APP.ou,$APP.kx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns true if the node at loc is a branch"],null)],null),new $APP.h(null,3,[$APP.Q,tgb,
$APP.ou,$APP.xx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the loc of the right sibling of the node at this loc, or nil"],null)],null),new $APP.h(null,3,[$APP.Q,bgb,$APP.ou,function(a){return $APP.ox.g(a.g?a.g(1):a.call(null,1))},$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns a seq of nodes leading to this loc"],null)],null),new $APP.h(null,3,[$APP.Q,lgb,$APP.ou,$APP.bka,$APP.mb,new $APP.h(null,
2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"zips all the way up and returns the root node, reflecting any\n changes."],null)],null),new $APP.h(null,3,[$APP.Q,pgb,$APP.ou,function(a){return $APP.qx.g(a.g?a.g(1):a.call(null,1))},$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns a seq of the right siblings of this loc"],null)],null),new $APP.h(null,3,[$APP.Q,Yfb,$APP.ou,$APP.lx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,
1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns a seq of the children of node at loc, which must be a branch"],null)],null),new $APP.h(null,3,[$APP.Q,Zfb,$APP.ou,$APP.cka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the loc of the leftmost sibling of the node at this loc, or self"],null)],null),new $APP.h(null,3,[$APP.Q,egb,$APP.ou,$APP.rx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],
null)],null),new $APP.h(null,3,[$APP.Q,kgb,$APP.ou,$APP.zx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the loc of the left sibling of the node at this loc, or nil"],null)],null),new $APP.h(null,3,[$APP.Q,ugb,$APP.ou,$APP.aka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns a seq of the left siblings of this loc"],null)],null),new $APP.h(null,3,[$APP.Q,Pfb,$APP.ou,$APP.fka,$APP.mb,new $APP.h(null,
2,[$APP.W,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null)),$APP.N,"Inserts the item as the leftmost child of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.Q,Ofb,$APP.ou,$APP.gka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.nK,$APP.ZC],null)),$APP.N,"Inserts the item as the rightmost child of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.Q,cgb,$APP.ou,$APP.yx,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,
1,5,$APP.J,[$APP.nK],null)),$APP.N,"Returns the loc of the rightmost sibling of the node at this loc, or self"],null)],null),new $APP.h(null,3,[$APP.Q,ngb,$APP.ou,$APP.kka,$APP.mb,new $APP.h(null,2,[$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.nK],null)),$APP.N,"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],null)],null)]),vgb);$APP.$u(new $APP.h(null,1,[$APP.Kq,new $APP.h(null,1,[$APP.DCa,wgb],null)],null));