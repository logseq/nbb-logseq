import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var Ffb=new $APP.q(null,"make-node","make-node",-1550461835,null),Gfb=new $APP.q("clojure.zip","append-child","clojure.zip/append-child",-1333956306,null),Hfb=new $APP.q("clojure.zip","insert-child","clojure.zip/insert-child",-210602132,null),Ifb=new $APP.q("clojure.zip","end?","clojure.zip/end?",381053413,null),Jfb=new $APP.q(null,"lefts","lefts",1054400638,null),Kfb=new $APP.q("clojure.zip","node","clojure.zip/node",-1345203614,null),Lfb=new $APP.q("clojure.zip","edit","clojure.zip/edit",-442418038,
null),Mfb=new $APP.q("clojure.zip","zipper","clojure.zip/zipper",-571036006,null),Nfb=new $APP.q("clojure.zip","next","clojure.zip/next",-1526224397,null),Ofb=new $APP.q("clojure.zip","branch?","clojure.zip/branch?",-1006947869,null),Pfb=new $APP.q("clojure.zip","up","clojure.zip/up",1006365229,null),Qfb=new $APP.q("clojure.zip","children","clojure.zip/children",65376544,null),Rfb=new $APP.q("clojure.zip","leftmost","clojure.zip/leftmost",-1791272498,null),Sfb=new $APP.q(null,"xml-zip","xml-zip",
-1566989793,null),Tfb=new $APP.q("clojure.zip","replace","clojure.zip/replace",413367034,null),Ufb=new $APP.q("clojure.zip","path","clojure.zip/path",1758958974,null),Vfb=new $APP.q("clojure.zip","rightmost","clojure.zip/rightmost",1799140158,null),Wfb=new $APP.q("clojure.zip","xml-zip","clojure.zip/xml-zip",-925187274,null),Xfb=new $APP.q("clojure.zip","down","clojure.zip/down",1356031458,null),Yfb=new $APP.q("clojure.zip","seq-zip","clojure.zip/seq-zip",-395973642,null),Zfb=new $APP.q("clojure.zip",
"prev","clojure.zip/prev",-389017676,null),$fb=new $APP.q("clojure.zip","insert-right","clojure.zip/insert-right",194316302,null),agb=new $APP.q("clojure.zip","vector-zip","clojure.zip/vector-zip",986730862,null),bgb=new $APP.q(null,"zipper","zipper",-1153741331,null),cgb=new $APP.q("clojure.zip","left","clojure.zip/left",1740332703,null),dgb=new $APP.q("clojure.zip","root","clojure.zip/root",-1119588559,null),egb=new $APP.q(null,"vector-zip","vector-zip",1075131029,null),fgb=new $APP.q("clojure.zip",
"remove","clojure.zip/remove",859584278,null),ggb=new $APP.q("clojure.zip","insert-left","clojure.zip/insert-left",1476893044,null),hgb=new $APP.q("clojure.zip","rights","clojure.zip/rights",1361118051,null),igb=new $APP.q("clojure.zip","make-node","clojure.zip/make-node",-640223892,null),jgb=new $APP.q(null,"seq-zip","seq-zip",-2034709283,null),kgb=new $APP.q(null,"rights","rights",2003591322,null),lgb=new $APP.q("clojure.zip","right","clojure.zip/right",-1593586409,null),mgb=new $APP.q("clojure.zip",
"lefts","clojure.zip/lefts",538689815,null);var ngb=$APP.kN.h($APP.zCa,null),ogb=$APP.ku($APP.gi([$APP.re(bgb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,4,5,$APP.H,[$APP.UG,$APP.$F,Ffb,$APP.FI],null))),$APP.M,"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],
null)),$APP.re($APP.boa,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],null)),$APP.re($APP.EEa,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],null)),$APP.re($APP.ola,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,
2,5,$APP.H,[$APP.pK,$APP.UC],null))),$APP.M,"Inserts the item as the right sibling of the node at this loc,\n  without moving"],null)),$APP.re($APP.rma,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null))),$APP.M,"Inserts the item as the left sibling of the node at this loc,\n without moving"],null)),$APP.re($APP.Kta,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns true if loc represents the end of a depth-first walk"],
null)),$APP.re($APP.sE,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the node at loc"],null)),$APP.re($APP.fK,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.sE],null))),$APP.M,"Replaces the node at this loc, without moving"],null)),$APP.re($APP.Soa,new $APP.h(null,3,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,4,5,$APP.H,[$APP.pK,$APP.DH,$APP.ik,$APP.MD],null))),$APP.M,"Replaces the node at this loc with the value of (f node args)",
$APP.oI,new $APP.h(null,6,[$APP.DA,!0,$APP.Qs,2,$APP.DJ,2,$APP.lJ,new $APP.G(null,1,5,$APP.H,[$APP.J($APP.pK,$APP.DH,$APP.MD)],null),$APP.U,$APP.J(new $APP.G(null,4,5,$APP.H,[$APP.pK,$APP.DH,$APP.ik,$APP.MD],null)),$APP.fF,$APP.J(null)],null)],null)),$APP.re(jgb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.FI],null))),$APP.M,"Returns a zipper for nested sequences, given a root sequence"],null)),$APP.re($APP.vI,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,
1,5,$APP.H,[$APP.pK],null))),$APP.M,"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],null)),$APP.re(Sfb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.FI],null))),$APP.M,"Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],null)),$APP.re(egb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,
[$APP.FI],null))),$APP.M,"Returns a zipper for nested vectors, given a root vector"],null)),$APP.re(Ffb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,3,5,$APP.H,[$APP.pK,$APP.sE,$APP.$F],null))),$APP.M,"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],null)),$APP.re($APP.UG,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns true if the node at loc is a branch"],
null)),$APP.re($APP.Kma,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the loc of the right sibling of the node at this loc, or nil"],null)),$APP.re($APP.jDa,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns a seq of nodes leading to this loc"],null)),$APP.re($APP.FI,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"zips all the way up and returns the root node, reflecting any\n changes."],
null)),$APP.re(kgb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns a seq of the right siblings of this loc"],null)),$APP.re($APP.$F,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns a seq of the children of node at loc, which must be a branch"],null)),$APP.re($APP.xra,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the loc of the leftmost sibling of the node at this loc, or self"],
null)),$APP.re($APP.FDa,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],null)),$APP.re($APP.wAa,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the loc of the left sibling of the node at this loc, or nil"],null)),$APP.re(Jfb,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,
[$APP.pK],null))),$APP.M,"Returns a seq of the left siblings of this loc"],null)),$APP.re($APP.Cya,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null))),$APP.M,"Inserts the item as the leftmost child of the node at this loc,\n  without moving"],null)),$APP.re($APP.sxa,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null))),$APP.M,"Inserts the item as the rightmost child of the node at this loc,\n  without moving"],
null)),$APP.re($APP.Yza,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Returns the loc of the rightmost sibling of the node at this loc, or self"],null)),$APP.re($APP.CA,new $APP.h(null,2,[$APP.U,$APP.J($APP.Ak,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null))),$APP.M,"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],null))],[new $APP.h(null,3,[$APP.N,Mfb,$APP.ju,$APP.gx,$APP.mb,new $APP.h(null,
2,[$APP.U,$APP.J(new $APP.G(null,4,5,$APP.H,[$APP.UG,$APP.$F,Ffb,$APP.FI],null)),$APP.M,"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],null)],null),new $APP.h(null,
3,[$APP.N,Pfb,$APP.ju,$APP.rx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],null)],null),new $APP.h(null,3,[$APP.N,Zfb,$APP.ju,$APP.lka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],null)],null),new $APP.h(null,3,[$APP.N,$fb,$APP.ju,
$APP.hka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null)),$APP.M,"Inserts the item as the right sibling of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.N,ggb,$APP.ju,$APP.gka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null)),$APP.M,"Inserts the item as the left sibling of the node at this loc,\n without moving"],null)],null),new $APP.h(null,3,[$APP.N,Ifb,$APP.ju,$APP.mka,$APP.mb,
new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns true if loc represents the end of a depth-first walk"],null)],null),new $APP.h(null,3,[$APP.N,Kfb,$APP.ju,$APP.hx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the node at loc"],null)],null),new $APP.h(null,3,[$APP.N,Tfb,$APP.ju,$APP.yx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.sE],null)),$APP.M,"Replaces the node at this loc, without moving"],
null)],null),new $APP.h(null,3,[$APP.N,Lfb,$APP.ju,$APP.HN,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,4,5,$APP.H,[$APP.pK,$APP.DH,$APP.ik,$APP.MD],null)),$APP.M,"Replaces the node at this loc with the value of (f node args)"],null)],null),new $APP.h(null,3,[$APP.N,Yfb,$APP.ju,function(a){return $APP.gx($APP.Je,$APP.ef,function(b,c){return $APP.re(c,$APP.se(b))},a)},$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.FI],null)),$APP.M,"Returns a zipper for nested sequences, given a root sequence"],
null)],null),new $APP.h(null,3,[$APP.N,Nfb,$APP.ju,$APP.kka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],null)],null),new $APP.h(null,3,[$APP.N,Wfb,$APP.ju,function(a){return $APP.gx($APP.qg($APP.Eb),$APP.oq.h($APP.r,$APP.hva),function(b,c){return $APP.ui.j(b,$APP.hva,$APP.k(c)?$APP.pg.h($APP.Iw,
c):c)},a)},$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.FI],null)),$APP.M,"Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],null)],null),new $APP.h(null,3,[$APP.N,agb,$APP.ju,function(a){return $APP.gx($APP.De,$APP.r,function(b,c){return $APP.re($APP.cf(c),$APP.se(b))},a)},$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.FI],null)),$APP.M,"Returns a zipper for nested vectors, given a root vector"],null)],null),new $APP.h(null,
3,[$APP.N,igb,$APP.ju,$APP.kx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,3,5,$APP.H,[$APP.pK,$APP.sE,$APP.$F],null)),$APP.M,"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],null)],null),new $APP.h(null,3,[$APP.N,Ofb,$APP.ju,$APP.ix,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns true if the node at loc is a branch"],null)],null),new $APP.h(null,3,[$APP.N,lgb,
$APP.ju,$APP.tx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the loc of the right sibling of the node at this loc, or nil"],null)],null),new $APP.h(null,3,[$APP.N,Ufb,$APP.ju,function(a){return $APP.mx.g(a.g?a.g(1):a.call(null,1))},$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns a seq of nodes leading to this loc"],null)],null),new $APP.h(null,3,[$APP.N,dgb,$APP.ju,$APP.eka,$APP.mb,new $APP.h(null,
2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"zips all the way up and returns the root node, reflecting any\n changes."],null)],null),new $APP.h(null,3,[$APP.N,hgb,$APP.ju,function(a){return $APP.ox.g(a.g?a.g(1):a.call(null,1))},$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns a seq of the right siblings of this loc"],null)],null),new $APP.h(null,3,[$APP.N,Qfb,$APP.ju,$APP.jx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,
1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns a seq of the children of node at loc, which must be a branch"],null)],null),new $APP.h(null,3,[$APP.N,Rfb,$APP.ju,$APP.fka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the loc of the leftmost sibling of the node at this loc, or self"],null)],null),new $APP.h(null,3,[$APP.N,Xfb,$APP.ju,$APP.px,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],
null)],null),new $APP.h(null,3,[$APP.N,cgb,$APP.ju,$APP.xx,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the loc of the left sibling of the node at this loc, or nil"],null)],null),new $APP.h(null,3,[$APP.N,mgb,$APP.ju,$APP.dka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns a seq of the left siblings of this loc"],null)],null),new $APP.h(null,3,[$APP.N,Hfb,$APP.ju,$APP.ika,$APP.mb,new $APP.h(null,
2,[$APP.U,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null)),$APP.M,"Inserts the item as the leftmost child of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.N,Gfb,$APP.ju,$APP.jka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.pK,$APP.UC],null)),$APP.M,"Inserts the item as the rightmost child of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.N,Vfb,$APP.ju,$APP.ux,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,
1,5,$APP.H,[$APP.pK],null)),$APP.M,"Returns the loc of the rightmost sibling of the node at this loc, or self"],null)],null),new $APP.h(null,3,[$APP.N,fgb,$APP.ju,$APP.nka,$APP.mb,new $APP.h(null,2,[$APP.U,$APP.J(new $APP.G(null,1,5,$APP.H,[$APP.pK],null)),$APP.M,"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],null)],null)]),ngb);$APP.Yu(new $APP.h(null,1,[$APP.Kq,new $APP.h(null,1,[$APP.zCa,ogb],null)],null));