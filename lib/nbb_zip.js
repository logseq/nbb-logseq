import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var $ab=new $APP.q(null,"make-node","make-node",-1550461835,null),abb=new $APP.q("clojure.zip","append-child","clojure.zip/append-child",-1333956306,null),bbb=new $APP.q("clojure.zip","insert-child","clojure.zip/insert-child",-210602132,null),cbb=new $APP.q("clojure.zip","end?","clojure.zip/end?",381053413,null),dbb=new $APP.q(null,"lefts","lefts",1054400638,null),ebb=new $APP.q("clojure.zip","node","clojure.zip/node",-1345203614,null),fbb=new $APP.q("clojure.zip","edit","clojure.zip/edit",-442418038,
null),gbb=new $APP.q("clojure.zip","zipper","clojure.zip/zipper",-571036006,null),hbb=new $APP.q("clojure.zip","next","clojure.zip/next",-1526224397,null),ibb=new $APP.q("clojure.zip","branch?","clojure.zip/branch?",-1006947869,null),jbb=new $APP.q("clojure.zip","up","clojure.zip/up",1006365229,null),kbb=new $APP.q("clojure.zip","children","clojure.zip/children",65376544,null),lbb=new $APP.q("clojure.zip","leftmost","clojure.zip/leftmost",-1791272498,null),mbb=new $APP.q(null,"xml-zip","xml-zip",
-1566989793,null),nbb=new $APP.q("clojure.zip","replace","clojure.zip/replace",413367034,null),obb=new $APP.q("clojure.zip","path","clojure.zip/path",1758958974,null),pbb=new $APP.q("clojure.zip","rightmost","clojure.zip/rightmost",1799140158,null),qbb=new $APP.q("clojure.zip","xml-zip","clojure.zip/xml-zip",-925187274,null),rbb=new $APP.q("clojure.zip","down","clojure.zip/down",1356031458,null),sbb=new $APP.q("clojure.zip","seq-zip","clojure.zip/seq-zip",-395973642,null),tbb=new $APP.q("clojure.zip",
"prev","clojure.zip/prev",-389017676,null),ubb=new $APP.q("clojure.zip","insert-right","clojure.zip/insert-right",194316302,null),vbb=new $APP.q("clojure.zip","vector-zip","clojure.zip/vector-zip",986730862,null),wbb=new $APP.q(null,"zipper","zipper",-1153741331,null),xbb=new $APP.q("clojure.zip","left","clojure.zip/left",1740332703,null),ybb=new $APP.q("clojure.zip","root","clojure.zip/root",-1119588559,null),zbb=new $APP.q(null,"vector-zip","vector-zip",1075131029,null),Abb=new $APP.q("clojure.zip",
"remove","clojure.zip/remove",859584278,null),Bbb=new $APP.q("clojure.zip","insert-left","clojure.zip/insert-left",1476893044,null),Cbb=new $APP.q("clojure.zip","rights","clojure.zip/rights",1361118051,null),Dbb=new $APP.q("clojure.zip","make-node","clojure.zip/make-node",-640223892,null),Ebb=new $APP.q(null,"seq-zip","seq-zip",-2034709283,null),Fbb=new $APP.q(null,"rights","rights",2003591322,null),Gbb=new $APP.q("clojure.zip","right","clojure.zip/right",-1593586409,null),Hbb=new $APP.q("clojure.zip",
"lefts","clojure.zip/lefts",538689815,null);var Ibb=$APP.DO.h($APP.YAa,null),Jbb=$APP.iu($APP.gi([$APP.re(wbb,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,4,5,$APP.I,[$APP.vI,$APP.CH,$ab,$APP.hK],null))),$APP.M,"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],
null)),$APP.re($APP.goa,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],null)),$APP.re($APP.dDa,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],null)),$APP.re($APP.rla,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,
2,5,$APP.I,[$APP.IL,$APP.PC],null))),$APP.M,"Inserts the item as the right sibling of the node at this loc,\n  without moving"],null)),$APP.re($APP.tma,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null))),$APP.M,"Inserts the item as the left sibling of the node at this loc,\n without moving"],null)),$APP.re($APP.msa,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns true if loc represents the end of a depth-first walk"],
null)),$APP.re($APP.GE,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the node at loc"],null)),$APP.re($APP.zL,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.GE],null))),$APP.M,"Replaces the node at this loc, without moving"],null)),$APP.re($APP.Goa,new $APP.h(null,3,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,4,5,$APP.I,[$APP.IL,$APP.gJ,$APP.lk,$APP.JD],null))),$APP.M,"Replaces the node at this loc with the value of (f node args)",
$APP.SJ,new $APP.h(null,6,[$APP.BA,!0,$APP.Os,2,$APP.cL,2,$APP.KK,new $APP.H(null,1,5,$APP.I,[$APP.J($APP.IL,$APP.gJ,$APP.JD)],null),$APP.V,$APP.J(new $APP.H(null,4,5,$APP.I,[$APP.IL,$APP.gJ,$APP.lk,$APP.JD],null)),$APP.eG,$APP.J(null)],null)],null)),$APP.re(Ebb,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.hK],null))),$APP.M,"Returns a zipper for nested sequences, given a root sequence"],null)),$APP.re($APP.ZJ,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,
1,5,$APP.I,[$APP.IL],null))),$APP.M,"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],null)),$APP.re(mbb,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.hK],null))),$APP.M,"Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],null)),$APP.re(zbb,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,
[$APP.hK],null))),$APP.M,"Returns a zipper for nested vectors, given a root vector"],null)),$APP.re($ab,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,3,5,$APP.I,[$APP.IL,$APP.GE,$APP.CH],null))),$APP.M,"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],null)),$APP.re($APP.vI,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns true if the node at loc is a branch"],
null)),$APP.re($APP.Nma,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the loc of the right sibling of the node at this loc, or nil"],null)),$APP.re($APP.KBa,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns a seq of nodes leading to this loc"],null)),$APP.re($APP.hK,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"zips all the way up and returns the root node, reflecting any\n changes."],
null)),$APP.re(Fbb,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns a seq of the right siblings of this loc"],null)),$APP.re($APP.CH,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns a seq of the children of node at loc, which must be a branch"],null)),$APP.re($APP.Wra,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the loc of the leftmost sibling of the node at this loc, or self"],
null)),$APP.re($APP.cCa,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],null)),$APP.re($APP.Tya,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the loc of the left sibling of the node at this loc, or nil"],null)),$APP.re(dbb,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,
[$APP.IL],null))),$APP.M,"Returns a seq of the left siblings of this loc"],null)),$APP.re($APP.Zwa,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null))),$APP.M,"Inserts the item as the leftmost child of the node at this loc,\n  without moving"],null)),$APP.re($APP.Nva,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null))),$APP.M,"Inserts the item as the rightmost child of the node at this loc,\n  without moving"],
null)),$APP.re($APP.vya,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Returns the loc of the rightmost sibling of the node at this loc, or self"],null)),$APP.re($APP.AA,new $APP.h(null,2,[$APP.V,$APP.J($APP.Ak,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null))),$APP.M,"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],null))],[new $APP.h(null,3,[$APP.N,gbb,$APP.hu,$APP.fx,$APP.nb,new $APP.h(null,
2,[$APP.V,$APP.J(new $APP.H(null,4,5,$APP.I,[$APP.vI,$APP.CH,$ab,$APP.hK],null)),$APP.M,"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],null)],null),new $APP.h(null,
3,[$APP.N,jbb,$APP.hu,$APP.qx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],null)],null),new $APP.h(null,3,[$APP.N,tbb,$APP.hu,$APP.oka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],null)],null),new $APP.h(null,3,[$APP.N,ubb,$APP.hu,
$APP.kka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null)),$APP.M,"Inserts the item as the right sibling of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.N,Bbb,$APP.hu,$APP.jka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null)),$APP.M,"Inserts the item as the left sibling of the node at this loc,\n without moving"],null)],null),new $APP.h(null,3,[$APP.N,cbb,$APP.hu,$APP.pka,$APP.nb,
new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns true if loc represents the end of a depth-first walk"],null)],null),new $APP.h(null,3,[$APP.N,ebb,$APP.hu,$APP.gx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the node at loc"],null)],null),new $APP.h(null,3,[$APP.N,nbb,$APP.hu,$APP.vx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.GE],null)),$APP.M,"Replaces the node at this loc, without moving"],
null)],null),new $APP.h(null,3,[$APP.N,fbb,$APP.hu,$APP.$O,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,4,5,$APP.I,[$APP.IL,$APP.gJ,$APP.lk,$APP.JD],null)),$APP.M,"Replaces the node at this loc with the value of (f node args)"],null)],null),new $APP.h(null,3,[$APP.N,sbb,$APP.hu,function(a){return $APP.fx($APP.Je,$APP.ef,function(b,c){return $APP.re(c,$APP.se(b))},a)},$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.hK],null)),$APP.M,"Returns a zipper for nested sequences, given a root sequence"],
null)],null),new $APP.h(null,3,[$APP.N,hbb,$APP.hu,$APP.nka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],null)],null),new $APP.h(null,3,[$APP.N,qbb,$APP.hu,function(a){return $APP.fx($APP.rg($APP.Fb),$APP.qq.h($APP.r,$APP.Ata),function(b,c){return $APP.ui.j(b,$APP.Ata,$APP.k(c)?$APP.qg.h($APP.Fw,
c):c)},a)},$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.hK],null)),$APP.M,"Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],null)],null),new $APP.h(null,3,[$APP.N,vbb,$APP.hu,function(a){return $APP.fx($APP.De,$APP.r,function(b,c){return $APP.re($APP.cf(c),$APP.se(b))},a)},$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.hK],null)),$APP.M,"Returns a zipper for nested vectors, given a root vector"],null)],null),new $APP.h(null,
3,[$APP.N,Dbb,$APP.hu,$APP.jx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,3,5,$APP.I,[$APP.IL,$APP.GE,$APP.CH],null)),$APP.M,"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],null)],null),new $APP.h(null,3,[$APP.N,ibb,$APP.hu,$APP.hx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns true if the node at loc is a branch"],null)],null),new $APP.h(null,3,[$APP.N,Gbb,
$APP.hu,$APP.sx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the loc of the right sibling of the node at this loc, or nil"],null)],null),new $APP.h(null,3,[$APP.N,obb,$APP.hu,function(a){return $APP.lx.g(a.g?a.g(1):a.call(null,1))},$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns a seq of nodes leading to this loc"],null)],null),new $APP.h(null,3,[$APP.N,ybb,$APP.hu,$APP.hka,$APP.nb,new $APP.h(null,
2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"zips all the way up and returns the root node, reflecting any\n changes."],null)],null),new $APP.h(null,3,[$APP.N,Cbb,$APP.hu,function(a){return $APP.nx.g(a.g?a.g(1):a.call(null,1))},$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns a seq of the right siblings of this loc"],null)],null),new $APP.h(null,3,[$APP.N,kbb,$APP.hu,$APP.ix,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,
1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns a seq of the children of node at loc, which must be a branch"],null)],null),new $APP.h(null,3,[$APP.N,lbb,$APP.hu,$APP.ika,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the loc of the leftmost sibling of the node at this loc, or self"],null)],null),new $APP.h(null,3,[$APP.N,rbb,$APP.hu,$APP.ox,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],
null)],null),new $APP.h(null,3,[$APP.N,xbb,$APP.hu,$APP.ux,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the loc of the left sibling of the node at this loc, or nil"],null)],null),new $APP.h(null,3,[$APP.N,Hbb,$APP.hu,$APP.gka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns a seq of the left siblings of this loc"],null)],null),new $APP.h(null,3,[$APP.N,bbb,$APP.hu,$APP.lka,$APP.nb,new $APP.h(null,
2,[$APP.V,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null)),$APP.M,"Inserts the item as the leftmost child of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.N,abb,$APP.hu,$APP.mka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.IL,$APP.PC],null)),$APP.M,"Inserts the item as the rightmost child of the node at this loc,\n  without moving"],null)],null),new $APP.h(null,3,[$APP.N,pbb,$APP.hu,$APP.tx,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,
1,5,$APP.I,[$APP.IL],null)),$APP.M,"Returns the loc of the rightmost sibling of the node at this loc, or self"],null)],null),new $APP.h(null,3,[$APP.N,Abb,$APP.hu,$APP.qka,$APP.nb,new $APP.h(null,2,[$APP.V,$APP.J(new $APP.H(null,1,5,$APP.I,[$APP.IL],null)),$APP.M,"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],null)],null)]),Ibb);$APP.Wu(new $APP.h(null,1,[$APP.Iq,new $APP.h(null,1,[$APP.YAa,Jbb],null)],null));