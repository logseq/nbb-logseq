import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var SZ=function(){var a=QZ;return $APP.k(a)?a:RZ.D()},Jbb=function(a){return QZ=a},Kbb=function(){return QZ=null},UZ=function(a){var b=$APP.Xf(a);a=$APP.A.h(b,$APP.Sl);var c=$APP.A.h(b,$APP.Tl);b=$APP.A.h(b,$APP.Pm);return[$APP.l.g($APP.yf($APP.fj.h(function(d){return $APP.Q.g($APP.ue(d))},TZ.g(SZ()))))," (",$APP.l.g(a),":",$APP.l.g(c),$APP.k(b)?[":",$APP.l.g(b)].join(""):null,")"].join("")},WZ=function(){return $APP.qg.h($APP.l,$APP.Ol.h(" ",$APP.yf(VZ.g(SZ()))))},ZZ=function(a){return $APP.k(XZ.g(SZ()))?
YZ(new $APP.H(null,2,5,$APP.J,[XZ,a],null),$APP.$m.h($APP.Rd,0)):null},Mbb=function(a){var b=function(){var c=Lbb.g(SZ());return $APP.k(c)?c:$APP.xj}();$APP.Xt.l($APP.z(["expected:",function(){var c=$APP.lH.g(a);return b.g?b.g(c):b.call(null,c)}()]));return $APP.Xt.l($APP.z(["  actual:",function(){var c=$Z.g(a);return b.g?b.g(c):b.call(null,c)}()]))},Obb=function(a,b){var c="string"===typeof a.stack;c?(c=a.stack,c=null==c?null:$APP.gl(c),b=null==c?null:$APP.A.h(c,b),b=null==b?null:(0,$APP.Bx)(b)):
b=c;if($APP.k(b)){b=$APP.y.j(null,0,null);a=$APP.y.j(null,1,null);c=new $APP.H(null,3,5,$APP.J,["todo",b,a],null);var d=Nbb.g(SZ());$APP.k(d)&&(b=$APP.up.h(d,new $APP.H(null,2,5,$APP.J,["todo",b-1],null)),$APP.k(b)?(c=$APP.fj,d=c.h,a=$APP.A.h(b,a-1),a=$APP.k(a)?a:$APP.ie($APP.v(b)),a=$APP.ef(d.call(c,$APP.v(a),new $APP.H(null,3,5,$APP.J,[$APP.Jl,$APP.Tl,$APP.Ul],null)))):a=c,c=a);a=$APP.y.j(c,0,null);b=$APP.y.j(c,1,null);c=$APP.y.j(c,2,null);return new $APP.h(null,3,[$APP.Sl,a,$APP.Tl,b,$APP.Pm,c],
null)}return new $APP.h(null,2,[$APP.Sl,a.fileName,$APP.Tl,a.lineNumber],null)},b_=function(a){var b=function(){var c=$APP.Ql.g(a);switch(c instanceof $APP.F?c.N:null){case "fail":return $APP.Kl.l($APP.z([Obb(Error(),4),a]));case "error":return $APP.Kl.l($APP.z([Obb($Z.g(a),0),a]));default:return a}}();return a_.g?a_.g(b):a_.call(null,b)},c_=function(a){if(a instanceof $APP.q){a=$APP.ie($APP.vs.j($APP.Fp(),a,!1));if($APP.k(a)){if(a instanceof $APP.jq)try{var b=$APP.n(a)}catch(c){b=null}else b=a;return $APP.k(b)?
$APP.re(b)&&$APP.Cb($APP.oq.g($APP.ue(a)))&&$APP.Cb($APP.yq.g($APP.ue(a))):null}return null}return $APP.re(a)},h_=function(a,b){var c=$APP.Ld(b),d=$APP.v(b);return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Rq,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.l(new $APP.D(null,d_,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.VAa,null,1,null),c))),null,1,null),$APP.z([new $APP.D(null,Pbb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,
$APP.tr,null,1,null),new $APP.D(null,d,null,1,null),$APP.z([new $APP.D(null,d_,null,1,null)])))),null,1,null)]))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.ok,null,1,null),new $APP.D(null,Pbb,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,e_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,f_,null,1,null),$APP.z([new $APP.D(null,$APP.Jq,null,1,null),
new $APP.D(null,a,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,b,null,1,null)))),null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.gEa,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,d,null,1,null)))),null,1,null),$APP.z([new $APP.D(null,d_,null,1,null)])))),null,1,null)]))))),null,1,null)))),
null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,e_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),$APP.z([new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,a,null,1,null),new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,Qbb,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,$APP.Tl.g($APP.ue(b)),null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,
$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,b,null,1,null)))),null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.VAa,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,$APP.QC,null,1,null)))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.gEa,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,
null,1,null),new $APP.D(null,d,null,1,null)))),null,1,null),$APP.z([new $APP.D(null,d_,null,1,null)])))),null,1,null)])))),null,1,null)]))))),null,1,null)))),null,1,null)])))),null,1,null),new $APP.D(null,Pbb,null,1,null)]))))},j_=function(a,b){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Rq,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.h(new $APP.D(null,i_,null,1,null),new $APP.D(null,b,null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,
$APP.ok,null,1,null),new $APP.D(null,i_,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,e_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,f_,null,1,null),$APP.z([new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,a,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,b,null,1,null)))),null,1,null),new $APP.D(null,
$Z,null,1,null),new $APP.D(null,i_,null,1,null)]))))),null,1,null)))),null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,e_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),$APP.z([new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,a,null,1,null),new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,Qbb,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,$APP.Tl.g($APP.ue(b)),
null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,b,null,1,null)))),null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,i_,null,1,null)]))))),null,1,null)))),null,1,null)])))),null,1,null),new $APP.D(null,i_,null,1,null)]))))},Sbb=function(a,b,c,d){a=$APP.ue(d);var e=$APP.Xf(a);a=$APP.A.h(e,$APP.Sl);var f=$APP.A.h(e,$APP.Tl),m=$APP.A.h(e,$APP.CK),p=$APP.A.h(e,$APP.Pm);e=$APP.A.h(e,$APP.$z);return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,
$APP.kk,null,1,null),new $APP.D(null,k_.j(b,c,d),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Bk,null,1,null),new $APP.D(null,$APP.Lm,null,1,null),$APP.z([new $APP.D(null,Rbb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,e,null,1,null),
new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,$APP.Ln,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,p,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,d,null,1,null)))),null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,Rbb,null,1,null),
new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,c,null,1,null)]))))),null,1,null)))),null,1,null)])))),null,1,null)]))))},Tbb=function(a){return a.D?a.D():a.call(null)},m_=function(a,b){return function(c){function d(){return b.g?b.g(c):b.call(null,c)}return a.g?a.g(d):a.call(null,d)}},n_=function(a){return $APP.cf.j(m_,Tbb,a)},Wbb=function(a,b){a=$APP.Ky.g($APP.js.h(new $APP.Ai(null,new $APP.h(null,1,[$APP.Ao,null],null),null),$APP.fj.h(function(c){return $APP.xe(c)?$APP.Ao:$APP.ng($APP.Ce,c)?
$APP.wm:$APP.ng($APP.re,c)?$APP.In:null},new $APP.H(null,2,5,$APP.J,[a,b],null))));a=$APP.y.j(a,0,null);b=new $APP.h(null,2,[$APP.wm,Ubb,$APP.In,Vbb],null);return b.h?b.h(a,Ubb):b.call(null,a,Ubb)},Zbb=function(a,b){return $APP.M.l($APP.un.h(Xbb,a),b,$APP.z([$APP.yf($APP.un.h(Ybb,a))]))},$bb=function(){},acb=function(a){return null!=a?$APP.yd===a.yn?!0:a.kd?!1:$APP.Jb($bb,a):$APP.Jb($bb,a)},ccb=function(a){return null==a?null:$APP.ko.F(a,$APP.xi,bcb,!0)},dcb=function(a,b){this.f=a;this.cn=b;this.J=
393217;this.M=0},ecb=function(a){return new dcb(a,$APP.Wf)},hcb=function(a,b){return new $APP.H(null,2,5,$APP.J,[function(){YZ.l(new $APP.H(null,1,5,$APP.J,[TZ],null),$APP.xf,$APP.z([a]));YZ(new $APP.H(null,2,5,$APP.J,[XZ,$APP.iF],null),$APP.Rd);b_(new $APP.h(null,2,[$APP.Ql,fcb,$APP.Xo,a],null));try{return b.D?b.D():b.call(null)}catch(d){var c=d;switch(c instanceof $APP.F?c.N:null){case "cljs.test/async-disabled":throw"Async tests require fixtures to be specified as maps.  Testing aborted.";default:return b_(new $APP.h(null,
4,[$APP.Ql,$APP.Ln,$APP.Jq,"Uncaught exception, not in assertion.",$APP.lH,null,$Z,c],null))}}},function(){b_(new $APP.h(null,2,[$APP.Ql,gcb,$APP.Xo,a],null));return YZ(new $APP.H(null,1,5,$APP.J,[TZ],null),$APP.Ld)}],null)},icb=function(a){var b=$APP.iF.g($APP.ue(a));return $APP.k(b)?hcb(a,b):null},jcb=function(a){return o_(icb(a))},lcb=function(a){return function(){var b=a.D?a.D():a.call(null);if(acb(b))throw kcb;return b}},t_=function(a){return $APP.fj.h(function(b){var c=$APP.y.j(b,0,null),d=
$APP.y.j(b,1,null);return function(){var e=$APP.lj.g($APP.l.g(c)),f=$APP.St($APP.Fp(),e),m=function(){var u=$APP.A.h(f,p_);return $APP.k(u)?YZ.l(new $APP.H(null,1,5,$APP.J,[q_],null),$APP.xi,$APP.z([e,$APP.n(u)])):null}(),p=function(){var u=$APP.A.h(f,r_);return $APP.k(u)?YZ.l(new $APP.H(null,1,5,$APP.J,[s_],null),$APP.xi,$APP.z([e,$APP.n(u)])):null}();return ccb(function(){var u=SZ(),t=$APP.up.h(u,new $APP.H(null,2,5,$APP.J,[q_,$APP.lj.g($APP.l.g(e))],null)),B=$APP.up.h(u,new $APP.H(null,2,5,$APP.J,
[s_,$APP.lj.g($APP.l.g(e))],null)),C=Wbb(t,B),E=C instanceof $APP.F?C.N:null;switch(E){case "async":return Zbb(t,$APP.Og.l($APP.sq.h($APP.Ml.h(Zbb,B),icb),$APP.z([$APP.Pg.h($APP.sq.h($APP.iF,$APP.ue),d)])));case "sync":var I=n_(B);return new $APP.H(null,1,5,$APP.J,[function(){function P(){for(var V=$APP.r(d),aa=null,ca=0,ka=0;;)if(ka<ca){var ma=aa.ha(null,ka),ua=$APP.iF.g($APP.ue(ma));$APP.k(ua)&&(ua=function(Z,Y,U,X,va,Ga,ia){return function(){return o_(hcb(ia,lcb(va)))}}(V,aa,ca,ka,ua,ua,ma,I,C,
E,u,t,B,e,f,m,p,b,c,d),I.g?I.g(ua):I.call(null,ua));ka+=1}else{var Ea=$APP.r(V);if(Ea){ua=Ea;if($APP.Fe(ua))V=$APP.ed(ua),ka=$APP.fd(ua),aa=V,ca=$APP.de(V),V=ka;else{ma=$APP.v(ua);var da=$APP.iF.g($APP.ue(ma));$APP.k(da)&&(V=function(Z,Y,U,X,va,Ga,ia){return function(){return o_(hcb(ia,lcb(va)))}}(V,aa,ca,ka,da,da,ma,ua,Ea,I,C,E,u,t,B,e,f,m,p,b,c,d),I.g?I.g(V):I.call(null,V));V=$APP.w(ua);aa=null;ca=0}ka=0}else return null}}var S=n_(t);return S.g?S.g(P):S.call(null,P)}],null);default:throw Error(["No matching clause: ",
$APP.l.g(E)].join(""));}}())}},$APP.Fj($APP.sq.h($APP.R,$APP.ue),a))},ncb=function(a){return o_($APP.M.h(t_(a),new $APP.H(null,1,5,$APP.J,[function(){var b=new $APP.h(null,2,[$APP.Ql,mcb,$APP.fI,a],null);return a_.g?a_.g(b):a_.call(null,b)}],null)))},ocb=function(a){var b=SZ(),c=$APP.St($APP.Fp(),a);return $APP.M.l(new $APP.H(null,1,5,$APP.J,[function(){null==b&&(QZ=RZ.D());var d=$APP.A.h(c,p_);$APP.k(d)&&YZ.l(new $APP.H(null,1,5,$APP.J,[q_],null),$APP.xi,$APP.z([a,$APP.n(d)]));d=$APP.A.h(c,r_);return $APP.k(d)?
YZ.l(new $APP.H(null,1,5,$APP.J,[s_],null),$APP.xi,$APP.z([a,$APP.n(d)])):null}],null),t_(function(){var d=$APP.vi($APP.St($APP.Fp(),a));d=$APP.Pg.h(function(e){return $APP.iF.g($APP.ue(e))},d);return $APP.Ox.h(function(e){return $APP.Tl.g($APP.ue(e))},d)}()),$APP.z([new $APP.H(null,1,5,$APP.J,[function(){return null==b?QZ=null:null}],null)]))},rcb=function(a,b){return new $APP.H(null,2,5,$APP.J,[function(){QZ=a;b_(new $APP.h(null,2,[$APP.Ql,pcb,$APP.R,b],null));return ccb(ocb(b))},function(){return b_(new $APP.h(null,
2,[$APP.Ql,qcb,$APP.R,b],null))}],null)},u_=function(a){return 0===g_.h(a,0)&&0===$APP.Ln.h(a,0)},Acb=function(a,b,c){a=$APP.xu($APP.Fp(),c);if(null==a)return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,scb,null,1,null),new $APP.D(null,"Unable to resolve",null,1,null),$APP.z([new $APP.D(null,$APP.l.g(c),null,1,null),new $APP.D(null,"to a test function.",null,1,null)]))));if($APP.Cb($APP.iF.g($APP.ue(a))))return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,scb,null,1,null),new $APP.D(null,$APP.l.g(c),null,
1,null),$APP.z([new $APP.D(null,"is not a test",null,1,null)]))));a=$APP.R.g(a);return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Rq,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.h(new $APP.D(null,tcb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.g(new $APP.D(null,ucb,null,1,null)))),null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,vcb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.KI,null,1,null),new $APP.D(null,
$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.bA,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.dG,null,1,null),new $APP.D(null,tcb,null,1,null)))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,wcb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.g(new $APP.D(null,
xcb,null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null),new $APP.D(null,$APP.k($APP.xu($APP.Fp(),p_))?$APP.T.g($APP.r($APP.M.l(new $APP.D(null,v_,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,q_,null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.KG,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,a,null,1,null)))),null,1,null),new $APP.D(null,$APP.lj.h($APP.l.g(a),"cljs-test-once-fixtures"),
null,1,null)])))):null,null,1,null),new $APP.D(null,$APP.k($APP.xu($APP.Fp(),r_))?$APP.T.g($APP.r($APP.M.l(new $APP.D(null,v_,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,s_,null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.KG,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,a,null,1,null)))),null,1,null),new $APP.D(null,$APP.lj.h($APP.l.g(a),"cljs-test-each-fixtures"),null,1,null)])))):null,null,1,
null)])))),null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,ycb,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.zk,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null))))),null,1,null)))),null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),
null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.bA,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.dG,null,1,null),new $APP.D(null,tcb,null,1,null)))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.g(new $APP.D(null,zcb,null,1,null)))),null,1,null)])))),null,1,null)])))),null,1,null))))),null,1,null)])))),null,1,null)))),null,1,null)]))))},Bcb=new $APP.q(null,"async","async",-1603666168,null),Ccb=new $APP.q(null,"test-var",
"test-var",534613154,null),Dcb=new $APP.q(null,"test-symbol","test-symbol",-818080551,null),Ecb=new $APP.q(null,"join-fixtures","join-fixtures",-1227879482,null),Fcb=new $APP.q("sci.configs.cljs.test","use-fixtures","sci.configs.cljs.test/use-fixtures",-1878625231,null),ucb=new $APP.q("cljs.test","get-current-env","cljs.test/get-current-env",1274262302,null),Gcb=new $APP.q(null,"summary","summary",2021379479,null),Hcb=new $APP.q(null,"testing-vars-str","testing-vars-str",851973974,null),Icb=new $APP.q(null,
"do-report","do-report",581091811,null),v_=new $APP.q("cljs.test","update-current-env!","cljs.test/update-current-env!",-250761520,null),Jcb=new $APP.q(null,"successful?","successful?",398154069,null),Pbb=new $APP.q(null,"result__42606__auto__","result__42606__auto__",725225466,null),Kcb=new $APP.F(null,"end-run-tests","end-run-tests",267300563),i_=new $APP.q(null,"value__42616__auto__","value__42616__auto__",-1805348364,null),Lcb=new $APP.q("sci.configs.cljs.test","do-report","sci.configs.cljs.test/do-report",
316393255,null),Mcb=new $APP.q("sci.configs.cljs.test","testing-vars-str","sci.configs.cljs.test/testing-vars-str",48435738,null),Ncb=new $APP.q("cljs.test","run-all-tests","cljs.test/run-all-tests",-154085674,null),Ocb=new $APP.q(null,"compose-fixtures","compose-fixtures",-228168278,null),Pcb=new $APP.q(null,"update-current-env!","update-current-env!",418667870,null),Qcb=new $APP.q("cljs.test","is","cljs.test/is",261278235,null),w_=new $APP.q(null,"fns","fns",-1469296983,null),Rcb=new $APP.q("sci.configs.cljs.test",
"empty-env","sci.configs.cljs.test/empty-env",2060437882,null),Scb=new $APP.q("cljs.test","run-tests","cljs.test/run-tests",-878084023,null),Tcb=new $APP.q(null,"e__42638__auto__","e__42638__auto__",13875530,null),Ucb=new $APP.q("sci.configs.cljs.test","try-expr","sci.configs.cljs.test/try-expr",23573368,null),Vcb=new $APP.q("sci.configs.cljs.test","set-test","sci.configs.cljs.test/set-test",-480384125,null),Rbb=new $APP.q(null,"t__42662__auto__","t__42662__auto__",-1222351571,null),Wcb=new $APP.q("sci.configs.cljs.test",
"test-var-impl","sci.configs.cljs.test/test-var-impl",769399980,null),Xcb=new $APP.q(null,"run-all-tests","run-all-tests",-1055479740,null),Ycb=new $APP.q("cljs.core","doto","cljs.core/doto",-1284816239,null),Zcb=new $APP.q(null,"*report-counters*","*report-counters*",406344974,null),$cb=new $APP.q("sci.configs.cljs.test","run-test","sci.configs.cljs.test/run-test",-478681890,null),adb=new $APP.q("clojure.template","do-template","clojure.template/do-template",-1006634288,null),wcb=new $APP.q("cljs.test",
"set-env!","cljs.test/set-env!",-702147289,null),bdb=new $APP.q("sci.configs.cljs.test","compose-fixtures","sci.configs.cljs.test/compose-fixtures",-511601042,null),cdb=new $APP.q(null,"*load-tests*","*load-tests*",882394383,null),$Z=new $APP.F(null,"actual","actual",107306363),ddb=new $APP.q(null,"result__42636__auto__","result__42636__auto__",-1271466089,null),edb=new $APP.q(null,"is","is",2009660525,null),fdb=new $APP.q(null,"assert-expr","assert-expr",-1462436312,null),gdb=new $APP.q("sci.configs.cljs.test",
"with-test","sci.configs.cljs.test/with-test",-631484984,null),hdb=new $APP.q(null,"inc-report-counter!","inc-report-counter!",1909274887,null),idb=new $APP.q(null,"argv","argv",177740632,null),x_=new $APP.q(null,"e__42648__auto__","e__42648__auto__",1624153346,null),d_=new $APP.q(null,"values__42605__auto__","values__42605__auto__",1263318221,null),jdb=new $APP.q(null,"test-vars-block","test-vars-block",-1720743025,null),Ubb=new $APP.F(null,"async","async",1050769601),p_=new $APP.q(null,"cljs-test-once-fixtures",
"cljs-test-once-fixtures",1554034706,null),kdb=new $APP.q(null,"report-impl","report-impl",-1301090300,null),ldb=new $APP.F(null,"each","each",940016129),mdb=new $APP.q(null,"*stack-trace-depth*","*stack-trace-depth*",-1172016436,null),Qbb=new $APP.q("cljs.core","*file*","cljs.core/*file*",-838921929,null),ndb=new $APP.q("cljs.test","-async-test","cljs.test/-async-test",-1212607601,null),odb=new $APP.q("sci.configs.cljs.test","report-impl","sci.configs.cljs.test/report-impl",-1550189064,null),pdb=
new $APP.q(null,"testing-contexts-str","testing-contexts-str",-514798554,null),qdb=new $APP.q("sci.configs.cljs.test","successful?","sci.configs.cljs.test/successful?",664821273,null),rdb=new $APP.q(null,"definition","definition",441801545,null),vcb=new $APP.q("cljs.test","run-block","cljs.test/run-block",-834586193,null),sdb=new $APP.q("sci.configs.cljs.test","assert-predicate","sci.configs.cljs.test/assert-predicate",-2137587061,null),tdb=new $APP.q(null,"test-vars","test-vars",411070579,null),
udb=new $APP.q("sci.configs.cljs.test","update-current-env!","sci.configs.cljs.test/update-current-env!",686643170,null),f_=new $APP.F(null,"pass","pass",1574159993),s_=new $APP.F(null,"each-fixtures","each-fixtures",802243977),vdb=new $APP.q(null,"empty-env","empty-env",1793510582,null),wdb=new $APP.q("sci.configs.cljs.test","assert-expr","sci.configs.cljs.test/assert-expr",1492108132,null),xdb=new $APP.q("sci.configs.cljs.test","run-tests","sci.configs.cljs.test/run-tests",-1815455961,null),y_=
new $APP.q(null,"sci.configs.cljs.test","sci.configs.cljs.test",-188958249,null),ydb=new $APP.q("sci.configs.cljs.test","deftest-","sci.configs.cljs.test/deftest-",-1194873897,null),qcb=new $APP.F(null,"end-test-ns","end-test-ns",1620675645),kcb=new $APP.F("cljs.test","async-disabled","cljs.test/async-disabled",-772095377),zdb=new $APP.q(null,"assert-predicate","assert-predicate",1886261199,null),bcb=new $APP.F("cljs.test","block?","cljs.test/block?",686379965),z_=new $APP.F("cljs.test","default",
"cljs.test/default",-1581405322),Adb=new $APP.q(null,"new-env","new-env",-1486390331,null),Bdb=new $APP.q(null,"clear-env!","clear-env!",1985937008,null),Cdb=new $APP.q(null,"function?","function?",1729250129,null),Ddb=new $APP.q(null,"set-test","set-test",-210047801,null),Edb=new $APP.q(null,"report","report",-1260380759,null),Fdb=new $APP.F("cljs.test","pprint","cljs.test/pprint",1627393641),Gdb=new $APP.q(null,"thrown-with-msg?","thrown-with-msg?",1169763203,null),Hdb=new $APP.q(null,"thrown?",
"thrown?",839971709,null),Idb=new $APP.q(null,"try-expr","try-expr",293516980,null),Jdb=new $APP.F(null,"always-fail","always-fail",-1303875085),scb=new $APP.q("cljs.core","*print-err-fn*","cljs.core/*print-err-fn*",1648367909,null),Kdb=new $APP.q(null,"*testing-vars*","*testing-vars*",-377796452,null),Ldb=new $APP.q(null,"use-fixtures","use-fixtures",-1608548619,null),Mdb=new $APP.q(null,"namespaces","namespaces",196374058,null),Ndb=new $APP.q("sci.configs.cljs.test","are","sci.configs.cljs.test/are",
1981898620,null),Odb=new $APP.q("sci.configs.cljs.test","testing","sci.configs.cljs.test/testing",-1221647390,null),gcb=new $APP.F(null,"end-test-var","end-test-var",984198545),Pdb=new $APP.q(null,"-async-test","-async-test",-272416711,null),e_=new $APP.q("cljs.test","do-report","cljs.test/do-report",1258077813,null),Qdb=new $APP.q("sci.configs.cljs.test","join-fixtures","sci.configs.cljs.test/join-fixtures",-2033635070,null),Rdb=new $APP.q(null,"*initial-report-counters*","*initial-report-counters*",
1159867069,null),Sdb=new $APP.q("cljs.test","test-var","cljs.test/test-var",639352116,null),Tdb=new $APP.F(null,"reporter","reporter",-805360621),A_=new $APP.q(null,"object__42635__auto__","object__42635__auto__",-943383488,null),Udb=new $APP.q(null,"testing","testing",-1492767066,null),Vdb=new $APP.q(null,"deftest-","deftest-",-1456693229,null),pcb=new $APP.F(null,"begin-test-ns","begin-test-ns",-1701237033),Wdb=new $APP.q(null,"reporter","reporter",835170906,null),Vbb=new $APP.F(null,"sync","sync",
-624148946),Xdb=new $APP.q(null,".-message",".-message",-1827250821,null),tcb=new $APP.q(null,"env__43174__auto__","env__43174__auto__",330569771,null),TZ=new $APP.F(null,"testing-vars","testing-vars",-2114769150),Ydb=new $APP.q(null,"run-block","run-block",637995581,null),mcb=new $APP.F(null,"end-test-vars","end-test-vars",-1394419713),Ybb=new $APP.F(null,"after","after",594996914),Zdb=new $APP.q(null,"deftest","deftest",938248815,null),$db=new $APP.F(null,"end-test-all-vars","end-test-all-vars",
548827253),aeb=new $APP.q("sci.configs.cljs.test","-async-test","sci.configs.cljs.test/-async-test",-2597507,null),beb=new $APP.q("sci.configs.cljs.test","set-env!","sci.configs.cljs.test/set-env!",-1375392171,null),fcb=new $APP.F(null,"begin-test-var","begin-test-var",-908571100),ceb=new $APP.q("sci.configs.cljs.test","async","sci.configs.cljs.test/async",-1878984636,null),deb=new $APP.q(null,"run-tests","run-tests",-1546431749,null),Nbb=new $APP.F(null,"source-map","source-map",1706252311),eeb=
new $APP.q("sci.configs.cljs.test","run-block","sci.configs.cljs.test/run-block",908067065,null),feb=new $APP.q("sci.configs.cljs.test","assert-any","sci.configs.cljs.test/assert-any",1006437217,null),XZ=new $APP.F(null,"report-counters","report-counters",-1702609242),geb=new $APP.q(null,"are","are",1713001856,null),heb=new $APP.q(null,"m__42649__auto__","m__42649__auto__",-1377817725,null),ieb=new $APP.q("cljs.test","try-expr","cljs.test/try-expr",1224770602,null),jeb=new $APP.q(null,"fixtures",
"fixtures",-1644620775,null),keb=new $APP.q(null,"get-current-env","get-current-env",1663721608,null),leb=new $APP.q("sci.configs.cljs.test","function?","sci.configs.cljs.test/function?",2004698133,null),meb=new $APP.q("sci.configs.cljs.test","test-vars","sci.configs.cljs.test/test-vars",144274751,null),neb=new $APP.q(null,"klass__42634__auto__","klass__42634__auto__",726458583,null),B_=new $APP.q(null,"env-or-ns","env-or-ns",-1749047216,null),oeb=new $APP.q("sci.configs.cljs.test","testing-contexts-str",
"sci.configs.cljs.test/testing-contexts-str",-783689878,null),peb=new $APP.q("sci.configs.cljs.test","clear-env!","sci.configs.cljs.test/clear-env!",1178990908,null),qeb=new $APP.q(null,"test-var-impl","test-var-impl",499587560,null),reb=new $APP.q("sci.configs.cljs.test","run-all-tests","sci.configs.cljs.test/run-all-tests",-823021768,null),seb=new $APP.q("sci.configs.cljs.test","get-current-env","sci.configs.cljs.test/get-current-env",1943239244,null),teb=new $APP.q("sci.configs.cljs.test","inc-report-counter!",
"sci.configs.cljs.test/inc-report-counter!",1642740803,null),ueb=new $APP.q(null,"env","env",-175281708,null),q_=new $APP.F(null,"once-fixtures","once-fixtures",1253947167),VZ=new $APP.F(null,"testing-contexts","testing-contexts",-1485646523),veb=new $APP.q(null,"___42839__auto__","___42839__auto__",1930750498,null),web=new $APP.q("sci.configs.cljs.test","test-var","sci.configs.cljs.test/test-var",-298518554,null),Lbb=new $APP.F(null,"formatter","formatter",-483008823),xeb=new $APP.q(null,"with-test",
"with-test",-899332596,null),ycb=new $APP.q("cljs.test","test-vars-block","cljs.test/test-vars-block",-257828355,null),yeb=new $APP.q("cljs.core","re-find","cljs.core/re-find",745076500,null),C_=new $APP.F(null,"author","author",2111686192),zeb=new $APP.q(null,"done","done",750687339,null),l_=new $APP.q("cljs.test","report","cljs.test/report",-1933655233,null),Aeb=new $APP.q("sci.configs.cljs.test","is","sci.configs.cljs.test/is",1207169321,null),r_=new $APP.q(null,"cljs-test-each-fixtures","cljs-test-each-fixtures",
2061085390,null),Beb=new $APP.q(null,"set-env!","set-env!",-1099160431,null),Ceb=new $APP.q("sci.configs.cljs.test","test-vars-block","sci.configs.cljs.test/test-vars-block",-1992257845,null),xcb=new $APP.q("cljs.test","empty-env","cljs.test/empty-env",849387048,null),Deb=new $APP.q(null,"run-test","run-test",-747708006,null),Eeb=new $APP.q("sci.configs.cljs.test","deftest","sci.configs.cljs.test/deftest",670273323,null),Xbb=new $APP.F(null,"before","before",-1633692388),zcb=new $APP.q("cljs.test",
"clear-env!","cljs.test/clear-env!",241475586,null),Feb=new $APP.q(null,"assert-any","assert-any",735315109,null),g_=new $APP.F(null,"fail","fail",1706214930);var D_=$APP.kN.h($APP.jI,null),E_=$APP.eN.j(cdb,!0,new $APP.h(null,1,[$APP.R,D_],null)),Geb=$APP.eN.j(mdb,null,new $APP.h(null,1,[$APP.R,D_],null)),Heb=$APP.eN.j(Zcb,null,new $APP.h(null,1,[$APP.R,D_],null)),Ieb=$APP.eN.j(Rdb,new $APP.h(null,4,[$APP.iF,0,f_,0,g_,0,$APP.Ln,0],null),new $APP.h(null,1,[$APP.R,D_],null)),Jeb=$APP.eN.j(Kdb,$APP.Kd,new $APP.h(null,1,[$APP.R,D_],null)),RZ=function RZ(a){switch(arguments.length){case 0:return RZ.D();case 1:return RZ.g(arguments[0]);default:throw Error(["Invalid arity: ",
$APP.l.g(arguments.length)].join(""));}};RZ.D=function(){return RZ.g(z_)};RZ.g=function(a){var b=new $APP.h(null,5,[XZ,new $APP.h(null,4,[$APP.iF,0,f_,0,g_,0,$APP.Ln,0],null),TZ,$APP.Kd,VZ,$APP.Kd,Lbb,$APP.xj,Tdb,a],null);return $APP.x.h(Fdb,a)?$APP.xi.l(b,Tdb,z_,$APP.z([Lbb,$APP.Du])):b};RZ.B=1;var QZ=null,YZ=function YZ(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return YZ.l(arguments[0],arguments[1],2<c.length?new $APP.Hd(c.slice(2),0,null):null)};
YZ.l=function(a,b,c){return QZ=$APP.qg.S($APP.Il,SZ(),a,b,c)};YZ.B=2;YZ.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);c=$APP.w(c);return this.l(b,a,c)};
var F_=function(){var a=$APP.zj.g($APP.Wf),b=$APP.zj.g($APP.Wf),c=$APP.zj.g($APP.Wf),d=$APP.zj.g($APP.Wf),e=$APP.A.j($APP.Wf,$APP.lr,$APP.Lj.D?$APP.Lj.D():$APP.Lj.call(null));return new $APP.ak($APP.lj.h("sci.configs.cljs.test","report-impl"),function(f){return new $APP.H(null,2,5,$APP.J,[Tdb.g(SZ()),$APP.Ql.g(f)],null)},$APP.Lm,e,a,b,c,d)}(),a_=function(){var a=new $APP.Ed(function(){return F_},odb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Uq,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,
new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),kdb,"sci/configs/cljs/test.cljs",14,1,!0,349,355,$APP.Kd,"Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.",$APP.k(F_)?F_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?
$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}();F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,f_],null),function(){return ZZ(f_)});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,g_],null),function(a){ZZ(g_);$APP.Xt.l($APP.z(["\nFAIL in",UZ(a)]));$APP.r(VZ.g(SZ()))&&$APP.Xt.l($APP.z([WZ()]));var b=$APP.Jq.g(a);$APP.k(b)&&$APP.Xt.l($APP.z([b]));return Mbb(a)});
F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,$APP.Ln],null),function(a){ZZ($APP.Ln);$APP.Xt.l($APP.z(["\nERROR in",UZ(a)]));$APP.r(VZ.g(SZ()))&&$APP.Xt.l($APP.z([WZ()]));var b=$APP.Jq.g(a);$APP.k(b)&&$APP.Xt.l($APP.z([b]));return Mbb(a)});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,$APP.wxa],null),function(a){$APP.Xt.l($APP.z(["\nRan",$APP.iF.g(a),"tests containing",f_.g(a)+g_.g(a)+$APP.Ln.g(a),"assertions."]));return $APP.Xt.l($APP.z([g_.g(a),"failures,",$APP.Ln.g(a),"errors."]))});
F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,pcb],null),function(a){return $APP.Xt.l($APP.z(["\nTesting",$APP.R.g(a).name]))});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,qcb],null),function(){return null});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,fcb],null),function(){return null});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,gcb],null),function(){return null});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,$db],null),function(){return null});F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,mcb],null),function(){return null});
var k_=function(){var a=$APP.zj.g($APP.Wf),b=$APP.zj.g($APP.Wf),c=$APP.zj.g($APP.Wf),d=$APP.zj.g($APP.Wf),e=$APP.A.j($APP.Wf,$APP.lr,$APP.Lj.D?$APP.Lj.D():$APP.Lj.call(null));return new $APP.ak($APP.lj.h("sci.configs.cljs.test","assert-expr"),function(f,m,p){return null==p?Jdb:$APP.Le(p)?$APP.v(p):$APP.Lm},$APP.Lm,e,a,b,c,d)}();
k_.ea(null,Jdb,function(a,b,c){a=$APP.ue(c);var d=$APP.Xf(a);a=$APP.A.h(d,$APP.Sl);c=$APP.A.h(d,$APP.Tl);var e=$APP.A.h(d,$APP.CK),f=$APP.A.h(d,$APP.Pm);d=$APP.A.h(d,$APP.$z);return $APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),$APP.z([new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null),new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,
1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,c,null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null)]))))),null,1,null))))});k_.ea(null,$APP.Lm,function(a,b,c){a=(a=$APP.Be(c))?c_($APP.v(c)):a;return $APP.k(a)?h_(b,c):j_(b,c)});
k_.ea(null,$APP.uD,function(a,b,c){a=$APP.ue(c);var d=$APP.Xf(a);a=$APP.A.h(d,$APP.Sl);var e=$APP.A.h(d,$APP.Tl),f=$APP.A.h(d,$APP.CK),m=$APP.A.h(d,$APP.Pm);d=$APP.A.h(d,$APP.$z);return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Rq,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.l(new $APP.D(null,neb,null,1,null),new $APP.D(null,$APP.y.h(c,1),null,1,null),$APP.z([new $APP.D(null,A_,null,1,null),new $APP.D(null,$APP.y.h(c,2),null,1,null)]))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,
$APP.Rq,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.h(new $APP.D(null,ddb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.jv,null,1,null),new $APP.D(null,neb,null,1,null),$APP.z([new $APP.D(null,A_,null,1,null)])))),null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.ok,null,1,null),new $APP.D(null,ddb,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,
$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,f_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,
null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.vr,null,1,null),new $APP.D(null,A_,null,1,null)))),null,1,null),new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,
$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,
$APP.CK,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.vr,null,1,null),new $APP.D(null,A_,null,1,null)))),null,1,null),new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null)])))),null,1,null),new $APP.D(null,ddb,null,1,null)])))),null,1,null)]))))});
k_.ea(null,Hdb,function(a,b,c){a=$APP.ue(c);var d=$APP.Xf(a);a=$APP.A.h(d,$APP.Sl);var e=$APP.A.h(d,$APP.Tl),f=$APP.A.h(d,$APP.CK),m=$APP.A.h(d,$APP.Pm);d=$APP.A.h(d,$APP.$z);var p=$APP.ie(c),u=$APP.tf(c,2);return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.kk,null,1,null),u,$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),$APP.z([new $APP.D(null,
$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,
$Z,null,1,null),new $APP.D(null,null,null,1,null),new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Bk,null,1,null),new $APP.D(null,p,null,1,null),$APP.z([new $APP.D(null,Tcb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),
$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,f_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,f,null,
1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,Tcb,null,1,null),new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null),new $APP.D(null,Tcb,null,1,null)])))),null,1,null)]))))});
k_.ea(null,Gdb,function(a,b,c){a=$APP.ue(c);var d=$APP.Xf(a);a=$APP.A.h(d,$APP.Sl);var e=$APP.A.h(d,$APP.Tl),f=$APP.A.h(d,$APP.CK),m=$APP.A.h(d,$APP.Pm);d=$APP.A.h(d,$APP.$z);var p=$APP.y.h(c,1),u=$APP.y.h(c,2),t=$APP.tf(c,3);return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.kk,null,1,null),t,$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),
$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,f,null,
1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,null,null,1,null),new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Bk,null,1,null),new $APP.D(null,p,null,1,null),$APP.z([new $APP.D(null,x_,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Rq,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.h(new $APP.D(null,heb,null,1,null),new $APP.D(null,
$APP.T.g($APP.r($APP.M.h(new $APP.D(null,Xdb,null,1,null),new $APP.D(null,x_,null,1,null)))),null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.ok,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,yeb,null,1,null),new $APP.D(null,u,null,1,null),$APP.z([new $APP.D(null,heb,null,1,null)])))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,
$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,$APP.Ql,null,1,null),new $APP.D(null,f_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,
$APP.CK,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,x_,null,1,null),new $APP.D(null,$APP.Jq,null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,l_,null,1,null),new $APP.D(null,$APP.qg.h($APP.ap,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Sl,null,1,null),new $APP.D(null,a,null,1,null),$APP.z([new $APP.D(null,$APP.$z,null,1,null),new $APP.D(null,d,null,1,null),new $APP.D(null,
$APP.Ql,null,1,null),new $APP.D(null,g_,null,1,null),new $APP.D(null,$APP.Pm,null,1,null),new $APP.D(null,m,null,1,null),new $APP.D(null,$APP.Tl,null,1,null),new $APP.D(null,e,null,1,null),new $APP.D(null,$APP.lH,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),new $APP.D(null,$APP.CK,null,1,null),new $APP.D(null,f,null,1,null),new $APP.D(null,$Z,null,1,null),new $APP.D(null,x_,null,1,null),new $APP.D(null,$APP.Jq,
null,1,null),new $APP.D(null,b,null,1,null)]))))),null,1,null)))),null,1,null)])))),null,1,null),new $APP.D(null,x_,null,1,null)])))),null,1,null)])))),null,1,null)]))))});var G_=function G_(a){switch(arguments.length){case 3:return G_.j(arguments[0],arguments[1],arguments[2]);case 4:return G_.F(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.l.g(arguments.length-2)].join(""));}};
G_.j=function(a,b,c){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,Qcb,null,1,null),new $APP.D(null,c,null,1,null),$APP.z([new $APP.D(null,null,null,1,null)]))))};G_.F=function(a,b,c,d){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,ieb,null,1,null),new $APP.D(null,d,null,1,null),$APP.z([new $APP.D(null,c,null,1,null)]))))};G_.B=4;
var H_=function H_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return H_.l(arguments[0],arguments[1],arguments[2],arguments[3],4<c.length?new $APP.Hd(c.slice(4),0,null):null)};
H_.l=function(a,b,c,d,e){if($APP.xe(c)&&$APP.xe(e)||0<$APP.de(c)&&0<$APP.de(e)&&0===$APP.kf($APP.de(e),$APP.de(c)))return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,adb,null,1,null),new $APP.D(null,c,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,Qcb,null,1,null),new $APP.D(null,d,null,1,null)))),null,1,null),e]))));throw Error("The number of args doesn't match are's argv.");};H_.B=4;
H_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);var e=$APP.w(d);d=$APP.v(e);e=$APP.w(e);return this.l(b,a,c,d,e)};var I_=function I_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return I_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
I_.l=function(a,b,c,d){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.nk,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,v_,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,VZ,null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.VJ,null,1,null),new $APP.D(null,c,null,1,null)])))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.kk,null,1,null),d,$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,
$APP.lk,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,v_,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(new $APP.D(null,VZ,null,1,null))))),null,1,null),$APP.z([new $APP.D(null,$APP.jF,null,1,null)])))),null,1,null)))),null,1,null)])))),null,1,null)]))))};I_.B=3;I_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};
var J_=function J_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return J_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
J_.l=function(a,b,c,d){return $APP.k($APP.n(E_))?$APP.T.g($APP.r($APP.M.l(new $APP.D(null,Ycb,null,1,null),new $APP.D(null,c,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.FJ,null,1,null),new $APP.D(null,$APP.KG,null,1,null),$APP.z([new $APP.D(null,$APP.iF,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([d])))),null,1,null)])))),null,1,null)])))):
c};J_.B=3;J_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};var K_=function K_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return K_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
K_.l=function(a,b,c,d){return $APP.k($APP.n(E_))?$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Dk,null,1,null),new $APP.D(null,$APP.ko.F(c,$APP.xi,$APP.iF,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([d]))))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,
Sdb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.zk,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null)])))):null};K_.B=3;K_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};
var L_=function L_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return L_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
L_.l=function(a,b,c,d){return $APP.k($APP.n(E_))?$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Dk,null,1,null),new $APP.D(null,$APP.ko.ma(c,$APP.xi,$APP.iF,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([d])))),$APP.Tt,!0),null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([new $APP.D(null,
$APP.T.g($APP.r($APP.M.h(new $APP.D(null,web,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.zk,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null)])))):null};L_.B=3;L_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};
var M_=function M_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return M_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
M_.l=function(a,b,c,d){return $APP.k($APP.n(E_))?$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.FJ,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.zk,null,1,null),new $APP.D(null,c,null,1,null)))),null,1,null),$APP.z([new $APP.D(null,$APP.KG,null,1,null),new $APP.D(null,$APP.iF,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.D()))),null,1,null),$APP.z([d])))),null,1,null)])))):null};
M_.B=3;M_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};
var o_=function o_(a){for(;;){var c=$APP.r(a);if(c){var d=c,e=$APP.v(d),f=e.D?e.D():e.call(null);if(acb(f)){var m=function(){return function(p,u){return function(){return $APP.Qc(u)?$APP.Xt.l($APP.z(["WARNING: Async test called done more than one time."])):$APP.n(u)}}(a,new $APP.oj(function(p){return function(){var u=$APP.Ld(p);return o_.g?o_.g(u):o_.call(null,u)}}(a,f,e,d,c),null),f,e,d,c)}();return f.g?f.g(m):f.call(null,m)}a=function(){var p=$APP.Ld(a);return $APP.k(bcb.g($APP.ue(f)))?$APP.M.h(f,
p):p}()}else return null}},N_=function N_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return N_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
N_.l=function(a,b,c,d){return $APP.T.g($APP.r($APP.M.h(new $APP.D(null,ndb,null,1,null),new $APP.D(null,$APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.hv,null,1,null),new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.h(new $APP.D(null,veb,null,1,null),new $APP.D(null,c,null,1,null))))),null,1,null),$APP.z([d])))),null,1,null))))};N_.B=3;N_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};$APP.g=dcb.prototype;
$APP.g.V=function(a,b){return new dcb(this.f,b)};$APP.g.U=function(){return this.cn};$APP.g.yn=$APP.yd;$APP.g.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);default:throw Error(["Invalid arity: ",$APP.l.g(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.Pb(b)))};$APP.g.g=function(a){return this.f.h?this.f.h(this,a):this.f.call(null,this,a)};
var Keb=function(){var a=new $APP.Ed(function(){return jcb},Wcb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),qeb,"sci/configs/cljs/test.cljs",20,1,913,913,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.SH],null)),"If v has a function in its :test metadata, calls that function,\n  add v to :testing-vars property of env.",$APP.k(jcb)?jcb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?
$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),O_=function O_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return O_.l(arguments[0],1<c.length?new $APP.Hd(c.slice(1),0,null):null)};
O_.l=function(a,b){var c=!$APP.Ce(a),d=c?RZ.D():a,e=$APP.zg(new $APP.h(null,5,[$APP.iF,0,f_,0,g_,0,$APP.Ln,0,$APP.Ql,$APP.wxa],null));return $APP.M.h($APP.Og.l(function(f){return $APP.M.h(rcb(d,f),new $APP.H(null,1,5,$APP.J,[function(){var m=e.uc,p=$APP.Ml.h($APP.Zt,$APP.Rx),u=e.Ka(null),t=XZ.g,B=SZ();QZ=null;return m.call(e,null,p(u,t.call(XZ,B)))}],null))},$APP.z([c?$APP.M.h(new $APP.H(null,1,5,$APP.J,[a],null),b):b])),new $APP.H(null,1,5,$APP.J,[function(){QZ=d;b_($APP.n(e));var f=$APP.xi.j($APP.n(e),
$APP.Ql,Kcb);a_.g?a_.g(f):a_.call(null,f);return QZ=null}],null))};O_.B=1;O_.G=function(a){var b=$APP.v(a);a=$APP.w(a);return this.l(b,a)};var P_=function P_(a){switch(arguments.length){case 0:return P_.D();case 1:return P_.g(arguments[0]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return P_.l(arguments[0],1<c.length?new $APP.Hd(c.slice(1),0,null):null)}};P_.D=function(){return P_.l(RZ.D(),$APP.z([$APP.lj.g($APP.l.g($APP.n($APP.Nq)))]))};
P_.g=function(a){return $APP.Ce(a)?P_.l(a,$APP.z([$APP.lj.g($APP.l.g($APP.n($APP.Nq)))])):P_.l(RZ.D(),$APP.z([a]))};P_.l=function(a,b){return o_($APP.qg.j(O_,a,b))};P_.G=function(a){var b=$APP.v(a);a=$APP.w(a);return this.l(b,a)};P_.B=1;
var Q_=function Q_(a){switch(arguments.length){case 2:return Q_.h(arguments[0],arguments[1]);case 3:return Q_.j(arguments[0],arguments[1],arguments[2]);case 4:return Q_.F(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.l.g(arguments.length-2)].join(""));}};
Q_.h=function(){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,Ncb,null,1,null),new $APP.D(null,null,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.g(new $APP.D(null,xcb,null,1,null)))),null,1,null)]))))};Q_.j=function(a,b,c){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,Ncb,null,1,null),new $APP.D(null,c,null,1,null),$APP.z([new $APP.D(null,$APP.T.g($APP.r($APP.M.g(new $APP.D(null,xcb,null,1,null)))),null,1,null)]))))};
Q_.F=function(a,b,c,d){return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,Scb,null,1,null),new $APP.D(null,d,null,1,null),$APP.z([$APP.fj.h(function(e){return $APP.T.g($APP.r($APP.M.h(new $APP.D(null,$APP.Ak,null,1,null),new $APP.D(null,e,null,1,null))))},function(){var e=$APP.mu($APP.Fp(),$APP.K($APP.EG));return $APP.k(c)?$APP.Pg.h(function(f){return $APP.Ui(c,$APP.Gi(f.name))},e):e}())]))))};Q_.B=4;
var R_=function R_(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return R_.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Hd(c.slice(3),0,null):null)};
R_.l=function(a,b,c,d){if($APP.k($APP.x.h?$APP.x.h($APP.Yya,c):$APP.x.call(null,$APP.Yya,c)))return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Dk,null,1,null),new $APP.D(null,p_,null,1,null),$APP.z([new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(d)))),null,1,null)]))));if($APP.k($APP.x.h?$APP.x.h(ldb,c):$APP.x.call(null,ldb,c)))return $APP.T.g($APP.r($APP.M.l(new $APP.D(null,$APP.Dk,null,1,null),new $APP.D(null,r_,null,1,null),$APP.z([new $APP.D(null,$APP.ef($APP.T.g($APP.r($APP.M.g(d)))),null,
1,null)]))));if($APP.k($APP.x.h?$APP.x.h($APP.RB,c):$APP.x.call(null,$APP.RB,c)))throw Error("First argument to cljs.test/use-fixtures must be :once or :each");throw Error(["No matching clause: ",$APP.l.g(c)].join(""));};R_.B=3;R_.G=function(a){var b=$APP.v(a),c=$APP.w(a);a=$APP.v(c);var d=$APP.w(c);c=$APP.v(d);d=$APP.w(d);return this.l(b,a,c,d)};F_.ea(null,new $APP.H(null,2,5,$APP.J,[z_,Kcb],null),function(a){return u_(a)?null:process.exitCode=1});
var Leb=function(){var a=new $APP.Ed(function(){return k_},wdb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),fdb,"sci/configs/cljs/test.cljs",22,1,533,533,$APP.Kd,null,$APP.k(k_)?k_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),Meb=$APP.gi([cdb,mdb,zdb,tdb,Feb,Kdb,Beb,Udb,geb,Rdb,Bcb,Hcb,Ldb,Bdb,Jcb,Ydb,Pcb,edb,vdb,Ocb,Icb,keb,Vdb,Cdb,xeb,
Idb,pdb,jdb,hdb,Ccb,Zdb,fdb,deb,Xcb,Zcb,Deb,Edb,Ddb,$APP.np,Pdb,Ecb],[E_,Geb,function(){var a=new $APP.Ed(function(){return h_},sdb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),zdb,"sci/configs/cljs/test.cljs",23,1,489,489,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.kJ,$APP.iH],null)),"Returns generic assertion code for any functional predicate.  The\n  'expected' argument to 'report' will contains the original form, the\n  'actual' argument will contain the form with all its sub-forms\n  evaluated.  If the predicate returns false, the 'actual' form will\n  be wrapped in (not...).",$APP.k(h_)?h_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=
new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return ncb},meb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",
$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),tdb,"sci/configs/cljs/test.cljs",16,1,969,969,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.bJ],null)),"Groups vars by their namespace and runs test-vars on them with\n  appropriate fixtures assuming they are present in the current\n  testing environment.",$APP.k(ncb)?ncb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);
return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return j_},feb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Feb,"sci/configs/cljs/test.cljs",17,1,510,510,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.kJ,$APP.iH],null)),"Returns generic assertion code for any test, including macros, Java\n  method calls, or isolated symbols.",$APP.k(j_)?j_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?
$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),Jeb,function(){var a=new $APP.Ed(function(){return Jbb},beb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Beb,"sci/configs/cljs/test.cljs",15,1,313,313,$APP.K(new $APP.H(null,1,5,$APP.J,[Adb],null)),null,$APP.k(Jbb)?Jbb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return I_},Odb,$APP.gi([$APP.qD,
$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Udb,"sci/configs/cljs/test.cljs",22,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K($APP.mK,$APP.fC)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.mK,$APP.ik,$APP.fC],null)),$APP.dF,$APP.K(null)],null),1,708,!0,708,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.mK,$APP.ik,$APP.fC],null)),"Adds a new string to the list of testing contexts.  May be nested,\n  but must occur inside a test function (deftest).",$APP.k(I_)?I_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:
$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return H_},Ndb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",
$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),geb,"sci/configs/cljs/test.cljs",18,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,2,$APP.zJ,2,$APP.hJ,$APP.K($APP.K(idb,$APP.AC,$APP.RD)),$APP.W,$APP.K(new $APP.H(null,4,5,$APP.J,[idb,$APP.AC,$APP.ik,$APP.RD],null)),$APP.dF,$APP.K(null)],null),1,683,!0,683,$APP.K(new $APP.H(null,4,5,$APP.J,[idb,$APP.AC,$APP.ik,$APP.RD],null)),"Checks multiple assertions with a template expression.\n  See clojure.template/do-template for an explanation of\n  templates.\n\n  Example: (are [x y] (\x3d x y)\n                2 (+ 1 1)\n                4 (* 2 2))\n  Expands to:\n           (do (is (\x3d 2 (+ 1 1)))\n               (is (\x3d 4 (* 2 2))))\n\n  Note: This breaks some reporting features, such as line numbers.",
$APP.k(H_)?H_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),Ieb,function(){var a=new $APP.Ed(function(){return N_},ceb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Bcb,"sci/configs/cljs/test.cljs",20,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K(zeb,$APP.fC)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[zeb,$APP.ik,$APP.fC],null)),$APP.dF,$APP.K(null)],null),1,860,!0,860,$APP.K(new $APP.H(null,3,5,$APP.J,[zeb,$APP.ik,$APP.fC],null)),"Wraps body as a CPS function that can be returned from a test to\n  continue asynchronously.  Binds done to a function that must be\n  invoked once and from an async context after any assertions.\n  (deftest example-with-timeout\n    (async done\n      (js/setTimeout (fn []\n                       ;; make assertions in async context...\n                       (done) ;; ...then call done\n                       )\n                     0)))",
$APP.k(N_)?N_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return UZ},Mcb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",
$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Hcb,"sci/configs/cljs/test.cljs",23,1,326,326,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.LH],null)),"Returns a string representation of the current test.  Renders names\n  in *testing-vars* as a list, then the source file and line of\n  current assertion.",$APP.k(UZ)?UZ.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);
return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return R_},Fcb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Ldb,"sci/configs/cljs/test.cljs",27,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K($APP.DE,w_)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.DE,$APP.ik,w_],null)),$APP.dF,$APP.K(null)],null),1,1082,!0,1082,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.DE,$APP.ik,w_],null)),null,$APP.k(R_)?R_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?
$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return Kbb},peb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Bdb,"sci/configs/cljs/test.cljs",17,1,316,316,$APP.K($APP.Sg),null,$APP.k(Kbb)?Kbb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return u_},qdb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,
$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Jcb,"sci/configs/cljs/test.cljs",18,1,1094,1094,$APP.K(new $APP.H(null,1,5,$APP.J,[Gcb],null)),"Returns true if the given test summary indicates all tests\n  were successful, false otherwise.",$APP.k(u_)?u_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,
d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return o_},eeb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Ydb,"sci/configs/cljs/test.cljs",16,1,835,835,$APP.K(new $APP.H(null,1,5,$APP.J,[w_],null)),"Invoke all functions in fns with no arguments. A fn can optionally\n  return\n  an async test - is invoked with a continuation running left fns\n  a seq of fns tagged per block - are invoked immediately after fn",$APP.k(o_)?o_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?
$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return YZ},udb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Pcb,"sci/configs/cljs/test.cljs",26,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,2,$APP.zJ,2,$APP.hJ,new $APP.H(null,1,5,$APP.J,[$APP.K($APP.mD,$APP.BH,$APP.RD)],null),$APP.W,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.mD,$APP.BH,$APP.ik,$APP.RD],null)),$APP.dF,$APP.K(null)],null),1,310,310,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.mD,$APP.BH,$APP.ik,$APP.RD],null)),null,$APP.k(YZ)?YZ.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),
$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return G_},Aeb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,
$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),edb,"sci/configs/cljs/test.cljs",17,new $APP.h(null,6,[$APP.FA,!1,$APP.Rs,2,$APP.zJ,2,$APP.hJ,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.iH],null),new $APP.H(null,2,5,$APP.J,[$APP.iH,$APP.kJ],null)),$APP.W,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.iH],null),new $APP.H(null,2,5,$APP.J,[$APP.iH,$APP.kJ],null)),$APP.dF,$APP.K(null,null)],null),1,663,!0,663,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.iH],null),new $APP.H(null,2,5,$APP.J,[$APP.iH,$APP.kJ],null)),"Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n\n  Example: (is (\x3d 4 (+ 2 2)) \"Two plus two should be 4\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-find) the regular expression re.",
$APP.k(G_)?G_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return RZ},Rcb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),vdb,"sci/configs/cljs/test.cljs",16,new $APP.h(null,6,[$APP.FA,!1,$APP.Rs,1,$APP.zJ,1,$APP.hJ,new $APP.H(null,2,5,$APP.J,[$APP.Sg,new $APP.H(null,1,5,$APP.J,[Wdb],null)],null),$APP.W,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[Wdb],null)),$APP.dF,$APP.K(null,null)],null),1,289,289,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[Wdb],null)),"Generates a testing environment with a reporter.\n   (empty-env) - uses the :cljs.test/default reporter.\n   (empty-env :cljs.test/pprint) - pretty prints all data structures.\n   (empty-env reporter) - uses a reporter of your choosing.\n   To create your own reporter see cljs.test/report",
$APP.k(RZ)?RZ.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return m_},bdb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Ocb,"sci/configs/cljs/test.cljs",23,1,785,785,$APP.K(new $APP.H(null,2,5,$APP.J,[$APP.Cpa,$APP.Dpa],null)),"Composes two fixture functions, creating a new fixture function\n  that combines their behavior.",$APP.k(m_)?m_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?
$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return b_},Lcb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Icb,"sci/configs/cljs/test.cljs",16,1,444,444,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.LH],null)),null,$APP.k(b_)?b_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return SZ},seb,$APP.gi([$APP.R,
$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),keb,"sci/configs/cljs/test.cljs",22,1,307,307,$APP.K($APP.Sg),null,$APP.k(SZ)?SZ.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return L_},ydb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,
$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Vdb,"sci/configs/cljs/test.cljs",23,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K($APP.JC,$APP.fC)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.JC,$APP.ik,$APP.fC],null)),$APP.dF,$APP.K(null)],null),1,754,!0,754,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.JC,$APP.ik,$APP.fC],null)),"Like deftest but creates a private var.",$APP.k(L_)?L_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),
$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return c_},leb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Cdb,"sci/configs/cljs/test.cljs",16,1,474,474,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.UH],null)),"Returns true if argument is a function or a symbol that resolves to\n  a function (not a macro).",$APP.k(c_)?c_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,
b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return J_},gdb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),xeb,"sci/configs/cljs/test.cljs",24,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K(rdb,$APP.fC)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[rdb,$APP.ik,$APP.fC],null)),$APP.dF,$APP.K(null)],null),1,724,!0,724,$APP.K(new $APP.H(null,3,5,$APP.J,[rdb,$APP.ik,$APP.fC],null)),"Takes any definition form (that returns a Var) as the first argument.\n  Remaining body goes in the :test metadata function for that Var.\n\n  When *load-tests* is false, only evaluates the definition, ignoring\n  the tests.",
$APP.k(J_)?J_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return Sbb},Ucb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Idb,"sci/configs/cljs/test.cljs",23,1,631,!0,631,$APP.K(new $APP.H(null,4,5,$APP.J,[$APP.vH,$APP.NE,$APP.kJ,$APP.iH],null)),"Used by the 'is' macro to catch unexpected exceptions.\n  You don't call this.",$APP.k(Sbb)?Sbb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?
$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return WZ},oeb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),pdb,"sci/configs/cljs/test.cljs",27,1,336,336,$APP.K($APP.Sg),"Returns a string representation of the current test context. Joins\n  strings in *testing-contexts* with spaces.",$APP.k(WZ)?WZ.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,
b,d)}(),function(){var a=new $APP.Ed(function(){return t_},Ceb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),jdb,"sci/configs/cljs/test.cljs",22,1,928,928,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.bJ],null)),"Like test-vars, but returns a block for further composition and\n  later execution.",$APP.k(t_)?t_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,
b,d)}(),function(){var a=new $APP.Ed(function(){return ZZ},teb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),hdb,"sci/configs/cljs/test.cljs",26,1,342,342,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.JC],null)),"Increments the named counter in *report-counters*, a ref to a map.\n  Does nothing if *report-counters* is nil.",$APP.k(ZZ)?ZZ.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?
$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),Keb,function(){var a=new $APP.Ed(function(){return K_},Eeb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Zdb,"sci/configs/cljs/test.cljs",22,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K($APP.JC,$APP.fC)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.JC,$APP.ik,$APP.fC],null)),$APP.dF,$APP.K(null)],null),1,737,!0,737,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.JC,$APP.ik,$APP.fC],null)),"Defines a test function with no arguments.  Test functions may call\n  other tests, so tests may be composed.  If you compose tests, you\n  should also define a function named test-ns-hook; run-tests will\n  call test-ns-hook instead of testing all vars.\n\n  Note: Actually, the test body goes in the :test metadata on the var,\n  and the real function (the value of the var) calls test-var on\n  itself.\n\n  When *load-tests* is false, deftest is ignored.",
$APP.k(K_)?K_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),Leb,function(){var a=new $APP.Ed(function(){return P_},xdb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),deb,"sci/configs/cljs/test.cljs",16,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,new $APP.H(null,2,5,$APP.J,[$APP.Sg,new $APP.H(null,1,5,$APP.J,[B_],null)],null),$APP.W,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[B_],null),new $APP.H(null,3,5,$APP.J,[B_,$APP.ik,Mdb],null)),$APP.dF,$APP.K(null,null,null)],null),1,1053,1053,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[B_],null),new $APP.H(null,3,5,$APP.J,[B_,$APP.ik,Mdb],null)),"Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given. Does not return a meaningful\n  value due to the possiblity of asynchronous execution. To detect test\n  completion add a :end-run-tests method case to the cljs.test/report\n  multimethod.",
$APP.k(P_)?P_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return Q_},reb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Xcb,"sci/configs/cljs/test.cljs",28,new $APP.h(null,6,[$APP.FA,!1,$APP.Rs,2,$APP.zJ,2,$APP.hJ,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[$APP.SD],null),new $APP.H(null,2,5,$APP.J,[$APP.SD,ueb],null)),$APP.W,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[$APP.SD],null),new $APP.H(null,2,5,$APP.J,[$APP.SD,ueb],null)),$APP.dF,$APP.K(null,null,null)],null),1,1067,!0,1067,$APP.K($APP.Sg,new $APP.H(null,1,5,$APP.J,[$APP.SD],null),new $APP.H(null,2,5,$APP.J,[$APP.SD,ueb],null)),"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.",
$APP.k(Q_)?Q_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),Heb,function(){var a=new $APP.Ed(function(){return Acb},$cb,$APP.gi([$APP.R,$APP.Q,$APP.yq,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,
3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Deb,!0,"sci/configs/cljs/test.cljs",27,1,1110,1110,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.vH,$APP.vH,Dcb],null)),"Runs a single test.\n  Because the intent is to run a single test, there is no check for the namespace test-ns-hook.",$APP.k(Acb)?Acb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?
e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),a_,function(){var a=new $APP.Ed(function(){return M_},Vcb,$APP.gi([$APP.qD,$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.lI,$APP.Pm,$APP.Tl,$APP.oq,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Ddb,"sci/configs/cljs/test.cljs",23,new $APP.h(null,6,[$APP.FA,!0,$APP.Rs,1,$APP.zJ,1,$APP.hJ,$APP.K($APP.K($APP.JC,$APP.fC)),$APP.W,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.JC,$APP.ik,$APP.fC],null)),$APP.dF,$APP.K(null)],null),1,763,!0,763,$APP.K(new $APP.H(null,3,5,$APP.J,[$APP.JC,$APP.ik,$APP.fC],null)),"Experimental.\n  Sets :test metadata of the named var to a fn with the given body.\n  The var must already exist.  Does not modify the value of the var.\n\n  When *load-tests* is false, set-test is ignored.",
$APP.k(M_)?M_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),D_,function(){var a=new $APP.Ed(function(){return ecb},aeb,$APP.gi([$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],[$APP.te(y_,new $APP.h(null,3,[C_,
"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Pdb,"sci/configs/cljs/test.cljs",18,1,875,875,$APP.K(new $APP.H(null,1,5,$APP.J,[$APP.BH],null)),null,$APP.k(ecb)?ecb.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}(),function(){var a=new $APP.Ed(function(){return n_},Qdb,$APP.gi([$APP.qD,
$APP.R,$APP.Q,$APP.Sl,$APP.$z,$APP.Pm,$APP.Tl,$APP.CK,$APP.W,$APP.N,$APP.iF],["1.1",$APP.te(y_,new $APP.h(null,3,[C_,"Stuart Sierra, with contributions and suggestions by\n  Chas Emerick, Allen Rohner, and Stuart Halloway",$APP.tu,!0,$APP.N,'A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the "is" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (\x3d 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith "abcde" "ab"))\n\n   You can type an "is" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user\x3e (is (\x3d 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (\x3d 5 (+ 2 2))\n         actual: (not (\x3d 5 4))\n       false\n\n   The "expected:" line shows you the original expression, and the\n   "actual:" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not \x3d to 5.  Finally, the\n   "false" on the last line is the value returned from the\n   expression.  The "is" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   "(is (thrown? c ...))" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0)))\n\n   "(is (thrown-with-msg? c re ...))" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #"Divide by zero"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   "is" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (\x3d 5 (+ 2 2)) "Crazy arithmetic")\n\n   In addition, you can document groups of assertions with the\n   "testing" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to "testing" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec \x3chttp://rspec.info/\x3e\n\n   (testing "Arithmetic"\n     (testing "with positive integers"\n       (is (\x3d 4 (+ 2 2)))\n       (is (\x3d 7 (+ 3 4))))\n     (testing "with negative integers"\n       (is (\x3d -4 (+ -2 -2)))\n       (is (\x3d -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the "testing" macro may only be used\n   INSIDE a "deftest" or "with-test" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The "with-test" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (\x3d 4 (my-function 2 2)))\n     (is (\x3d 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id\x3d51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (\x3d 4 (+ 2 2)))\n     (is (\x3d 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (\x3d 1 (- 4 3)))\n     (is (\x3d 3 (- 7 4))))\n\n   This creates functions named "addition" and "subtraction", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel\'s "Practical Common Lisp"\n   \x3chttp://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\x3e\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   "(arithmetic addition)", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function "(run-tests namespaces...)":\n\n   (run-tests \'your.namespace \'some.other.namespace)\n\n   If you don\'t specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use "(run-all-tests)".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the "arithmetic" example above, you\n   probably do not want the "addition" and "subtraction" tests run\n   separately.  In that case, you must define a special function\n   named "test-ns-hook" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable "*load-tests*" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by "with-test" or "deftest".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  "each"\n   fixtures are run repeatedly, once for each test function created\n   with "deftest" or "with-test".  "each" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   "each" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a "once" fixture, is only run once,\n   around ALL the tests in the namespace.  "once" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach "once" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the "is" macro by defining new\n   methods for the "assert-expr" multimethod.  These methods are\n   called during expansion of the "is" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the "report" function: (report event)\n\n   The \'event\' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to \'is\'\n\n   The "testing" strings will be a list in "*current-env*", and\n   the vars being tested will be a list in "*testing-vars*".\n\n   Your "report" function should wrap any printing calls in the\n   "with-test-out" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n'],
null)),Ecb,"sci/configs/cljs/test.cljs",20,1,792,792,$APP.K(new $APP.H(null,1,5,$APP.J,[jeb],null)),"Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty.",$APP.k(n_)?n_.H:null])),b=$APP.n(a),c=$APP.ue(a);a=$APP.k(null)?null:$APP.Q.g(c);var d=new $APP.h(null,4,[$APP.R,D_,$APP.Q,a,$APP.W,$APP.W.g(c),$APP.N,$APP.N.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.oq.g(c);return $APP.k(e)?e:$APP.yq.g(c)}())?
$APP.fN.j(a,b,d):$APP.nu.j(a,b,d)}()]);$APP.$u(new $APP.h(null,1,[$APP.Kq,new $APP.h(null,1,[$APP.jI,Meb],null)],null));