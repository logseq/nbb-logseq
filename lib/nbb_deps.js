import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
import*as esm_import$node_crypto from"node:crypto";import*as esm_import$node_fs from"node:fs";import*as esm_import$node_path from"node:path";import*as esm_import$node_child_process from"node:child_process";var ZLa=new $APP.F(null,"deps","deps",1883360319);var $La=$APP.B.h($APP.n($APP.qN),$APP.tJ),aMa=esm_import$node_path.resolve($La,".nbb",".cache"),bMa=$APP.sp.h($APP.n($APP.qN),new $APP.G(null,2,5,$APP.H,[$APP.DB,ZLa],null));
if($APP.k(bMa)){var cMa;cMa=esm_import$node_crypto.createHash("sha1").update($APP.l.g(bMa),"binary").digest("hex");var UO=esm_import$node_path.resolve(aMa,cMa),dMa=esm_import$node_path.resolve(UO,"deps.edn"),eMa=esm_import$node_path.resolve(UO,"nbb-deps.jar"),fMa=esm_import$node_path.resolve(UO,"nbb-deps");if(!$APP.k(esm_import$node_fs.existsSync(fMa))){var gMa=($APP.x.h("win32",process.platform),"bb"),hMa=esm_import$node_path.resolve(aMa,"extract.bb");esm_import$node_fs.mkdirSync(UO,{recursive:!0});
esm_import$node_fs.writeFileSync(dMa,$APP.l.g(new $APP.h(null,1,[ZLa,bMa],null)));$APP.vb.call(null,"Downloading dependencies...");esm_import$node_child_process.execSync([gMa," --config ",$APP.l.g(dMa)," --deps-root ",$APP.l.g($La)," uberjar ",$APP.l.g(eMa)].join(""));$APP.vb.call(null,"Extracting dependencies...");esm_import$node_fs.writeFileSync(hMa,["(fs/unzip ",$APP.wj.l($APP.z([eMa]))," ",$APP.wj.l($APP.z([fMa])),")"].join(""));esm_import$node_child_process.execSync(["bb ",$APP.l.g(hMa)].join(""));
esm_import$node_fs.unlinkSync(hMa);$APP.vb.call(null,"Done.")}$APP.Ap(fMa)};