import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
import*as esm_import$node_crypto from"node:crypto";import*as esm_import$node_fs from"node:fs";import*as esm_import$node_path from"node:path";import*as esm_import$node_child_process from"node:child_process";var fMa=new $APP.F(null,"deps","deps",1883360319);var gMa=$APP.A.h($APP.n($APP.qN),$APP.rJ),hMa=esm_import$node_path.resolve(gMa,".nbb",".cache"),iMa=$APP.up.h($APP.n($APP.qN),new $APP.H(null,2,5,$APP.J,[$APP.HB,fMa],null));
if($APP.k(iMa)){var jMa;jMa=esm_import$node_crypto.createHash("sha1").update($APP.l.g(iMa),"binary").digest("hex");var UO=esm_import$node_path.resolve(hMa,jMa),kMa=esm_import$node_path.resolve(UO,"deps.edn"),lMa=esm_import$node_path.resolve(UO,"nbb-deps.jar"),mMa=esm_import$node_path.resolve(UO,"nbb-deps");if(!$APP.k(esm_import$node_fs.existsSync(mMa))){var nMa=($APP.x.h("win32",process.platform),"bb"),oMa=esm_import$node_path.resolve(hMa,"extract.bb");esm_import$node_fs.mkdirSync(UO,{recursive:!0});
esm_import$node_fs.writeFileSync(kMa,$APP.l.g(new $APP.h(null,1,[fMa,iMa],null)));$APP.ub.call(null,"Downloading dependencies...");esm_import$node_child_process.execSync([nMa," --config ",$APP.l.g(kMa)," --deps-root ",$APP.l.g(gMa)," uberjar ",$APP.l.g(lMa)].join(""));$APP.ub.call(null,"Extracting dependencies...");esm_import$node_fs.writeFileSync(oMa,["(fs/unzip ",$APP.xj.l($APP.z([lMa]))," ",$APP.xj.l($APP.z([mMa])),")"].join(""));esm_import$node_child_process.execSync(["bb ",$APP.l.g(oMa)].join(""));
esm_import$node_fs.unlinkSync(oMa);$APP.ub.call(null,"Done.")}$APP.Cp(mMa)};