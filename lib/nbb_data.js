import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var QXa=new $APP.q("clojure.data","diff","clojure.data/diff",-683865998,null),RXa=new $APP.q(null,"diff","diff",-518492986,null);var SXa=$APP.kN.h($APP.II,null),TXa=new $APP.h(null,1,[RXa,function(){var a=new $APP.Cd(function(){return $APP.ax},QXa,$APP.gi([$APP.P,$APP.N,$APP.Vl,$APP.Zz,$APP.Om,$APP.Wl,$APP.EK,$APP.U,$APP.M,$APP.lF],[$APP.II,RXa,"clojure/data.cljs",11,1,144,144,$APP.J(new $APP.G(null,2,5,$APP.H,[$APP.AH,$APP.zH],null)),"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.",
$APP.k($APP.ax)?$APP.ax.H:null])),b=$APP.n(a),c=$APP.se(a);a=$APP.k(null)?null:$APP.N.g(c);var d=new $APP.h(null,4,[$APP.P,SXa,$APP.N,a,$APP.U,$APP.U.g(c),$APP.M,$APP.M.g(c)],null);return $APP.k($APP.Uq.g(c))?$APP.eN.j(a,b,d):$APP.k(function(){var e=$APP.kq.g(c);return $APP.k(e)?e:$APP.xq.g(c)}())?$APP.fN.j(a,b,d):$APP.iu.j(a,b,d)}()],null);$APP.Yu(new $APP.h(null,1,[$APP.Kq,new $APP.h(null,1,[$APP.II,TXa],null)],null));