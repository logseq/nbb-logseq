import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var GRa=new $APP.r("clojure.data","diff","clojure.data/diff",-683865998,null),HRa=new $APP.r(null,"diff","diff",-518492986,null);var IRa=$APP.uS.h($APP.wM,null),JRa=new $APP.k(null,1,[HRa,function(){var a=new $APP.Cd(function(){return $APP.Uw},GRa,$APP.gi([$APP.Q,$APP.O,$APP.Wl,$APP.zz,$APP.Nm,$APP.Xl,$APP.EP,$APP.Z,$APP.M,$APP.JF],[$APP.wM,HRa,"clojure/data.cljs",11,1,144,144,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.sK,$APP.rK],null)),"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.",
$APP.l($APP.Uw)?$APP.Uw.H:null])),b=$APP.p(a),c=$APP.te(a);a=$APP.l(null)?null:$APP.O.g(c);var d=new $APP.k(null,4,[$APP.Q,IRa,$APP.O,a,$APP.Z,$APP.Z.g(c),$APP.M,$APP.M.g(c)],null);return $APP.l($APP.Mq.g(c))?$APP.gS.j(a,b,d):$APP.l(function(){var e=$APP.gq.g(c);return $APP.l(e)?e:$APP.tq.g(c)}())?$APP.hS.j(a,b,d):$APP.cu.j(a,b,d)}()],null);$APP.Qu(new $APP.k(null,1,[$APP.Cq,new $APP.k(null,1,[$APP.wM,JRa],null)],null));