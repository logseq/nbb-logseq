import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var eKa=new $APP.r("clojure.data","diff","clojure.data/diff",-683865998,null),fKa=new $APP.r(null,"diff","diff",-518492986,null);var ria=$APP.zJ.h($APP.TH,null),sia=new $APP.g(null,1,[fKa,function(){var a=new $APP.Dd(function(){return $APP.mz},eKa,$APP.Oj([$APP.O,$APP.U,$APP.Km,$APP.vB,$APP.io,$APP.Lm,$APP.BP,$APP.V,$APP.N,$APP.oF],[$APP.TH,fKa,"clojure/data.cljs",11,1,144,144,$APP.R(new $APP.H(null,2,5,$APP.I,[$APP.RG,$APP.PG],null)),"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.",
$APP.m($APP.mz)?$APP.mz.A:null])),b=$APP.q(a),c=$APP.Be(a);a=$APP.m(null)?null:$APP.U.g(c);var d=new $APP.g(null,4,[$APP.O,ria,$APP.U,a,$APP.V,$APP.V.g(c),$APP.N,$APP.N.g(c)],null);return $APP.m($APP.Qt.g(c))?$APP.uJ.j(a,b,d):$APP.m(function(){var e=$APP.Qs.g(c);return $APP.m(e)?e:$APP.Ys.g(c)}())?$APP.vJ.j(a,b,d):$APP.xy.j(a,b,d)}()],null);$APP.Wy(new $APP.g(null,1,[$APP.Ft,new $APP.g(null,1,[$APP.TH,sia],null)],null));