import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var pFa=new $APP.t("clojure.data","diff","clojure.data/diff",-683865998,null),qFa=new $APP.t(null,"diff","diff",-518492986,null);var rFa=$APP.DO.h($APP.YI,null),sFa=new $APP.k(null,1,[qFa,function(){var a=new $APP.hd(function(){return $APP.ou},pFa,$APP.Hh([$APP.S,$APP.O,$APP.ul,$APP.Rw,$APP.mm,$APP.vl,$APP.UL,$APP.Z,$APP.N,$APP.FC],[$APP.YI,qFa,"clojure/data.cljs",11,1,144,144,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.eH,$APP.dH],null)),"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.",
$APP.l($APP.ou)?$APP.ou.I:null])),b=$APP.q(a),c=$APP.Vd(a);a=$APP.l(null)?null:$APP.O.g(c);var d=new $APP.k(null,4,[$APP.S,rFa,$APP.O,a,$APP.Z,$APP.Z.g(c),$APP.N,$APP.N.g(c)],null);return $APP.l($APP.Vp.g(c))?$APP.xO.j(a,b,d):$APP.l(function(){var e=$APP.np.g(c);return $APP.l(e)?e:$APP.Bp.g(c)}())?$APP.yO.j(a,b,d):$APP.kt.j(a,b,d)}()],null);$APP.Zt(new $APP.k(null,1,[$APP.Kp,new $APP.k(null,1,[$APP.YI,sFa],null)],null));