import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var qWa=new $APP.q("clojure.data","diff","clojure.data/diff",-683865998,null),rWa=new $APP.q(null,"diff","diff",-518492986,null);var sWa=$APP.EO.h($APP.kK,null),tWa=new $APP.h(null,1,[rWa,function(){var a=new $APP.Cd(function(){return $APP.$w},qWa,$APP.gi([$APP.Q,$APP.N,$APP.Vl,$APP.Vz,$APP.Om,$APP.Wl,$APP.YL,$APP.V,$APP.M,$APP.oG],[$APP.kK,rWa,"clojure/data.cljs",11,1,144,144,$APP.J(new $APP.H(null,2,5,$APP.I,[$APP.eJ,$APP.dJ],null)),"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.",
$APP.k($APP.$w)?$APP.$w.H:null])),b=$APP.n(a),c=$APP.se(a);a=$APP.k(null)?null:$APP.N.g(c);var d=new $APP.h(null,4,[$APP.Q,sWa,$APP.N,a,$APP.V,$APP.V.g(c),$APP.M,$APP.M.g(c)],null);return $APP.k($APP.Sq.g(c))?$APP.yO.j(a,b,d):$APP.k(function(){var e=$APP.mq.g(c);return $APP.k(e)?e:$APP.zq.g(c)}())?$APP.zO.j(a,b,d):$APP.gu.j(a,b,d)}()],null);$APP.Wu(new $APP.h(null,1,[$APP.Iq,new $APP.h(null,1,[$APP.kK,tWa],null)],null));