{:paths ["script"]
 :deps
 {nbb.build/nbb.build
  {:git/url "https://github.com/babashka/nbb"
   :git/sha "2f0f645ae685f02a6c54974f444dfee2a16657eb"
   :deps/root "build"}
  #_{:local/root "../nbb/build"}
  nbb/nbb
  {:git/url "https://github.com/logseq/nbb"
   :git/sha "4c59d11d74db75cc4d1430987659c8bdb95f3784"}
  #_{:local/root "../nbb"}
  org.babashka/sci
  {:mvn/version "0.8.41"}
  datascript/deps
  {:git/url "https://github.com/logseq/nbb-features"
   :git/sha "48329d4059b769b6c2d4f4d09d7344b216edfbc7"
   :deps/root "features/datascript"}
  #_{:local/root "../nbb-features/features/datascript"}
  datascript-transit/deps
  {:git/url "https://github.com/logseq/nbb-features"
   :git/sha "48329d4059b769b6c2d4f4d09d7344b216edfbc7"
   :deps/root "features/datascript-transit"}
  #_{:local/root "../nbb-features/features/datascript-transit"}
  cljs-time/deps {:local/root "features/cljs-time"}
  ordered/deps {:local/root "features/ordered"}}

 :tasks
 {:requires ([babashka.fs :as fs]
             [nbb.build :as build]
             [clojure.string :as str])

  clean (fs/delete-tree "lib")

  npm-install (shell "npm install")

  release {:depends [clean npm-install]
           :doc "Compiles release build."
           :task (do
                   ;; Not having fresh copy fails build
                   (fs/delete-if-exists "shadow-cljs.edn")
                   (println "Building with nbb env vars:" (pr-str (select-keys (System/getenv) ["NBB_CLI_NAME" "NBB_NPM_LIB_NAME"])))
                   (build/release *command-line-args*))}

  test nbb-feature-tests/main

  update-nbb
  {:doc "Update to latest nbb tag"
   :extra-deps {borkdude/rewrite-edn {:mvn/version "0.2.0"}}
   :requires ([borkdude.rewrite-edn :as r])
   :task
   (let [update-bb-dep
         (fn [dep dep-map]
           (let [nodes (-> "bb.edn" slurp r/parse-string)]
             (spit "bb.edn"
                   (str (reduce (fn [acc [k v]]
                                  (r/assoc-in acc [:deps dep k] v))
                                nodes
                                dep-map)))))
         [_ sha tag]
         (->> (shell {:out :string} "git ls-remote --heads --tags https://github.com/babashka/nbb.git")
              :out
              str/split-lines
              last
              (re-matches (re-pattern "(\\S+)\\trefs/tags/([v.0-9]+).*")))]
     (assert (and sha tag) "Sha and tag must exist to continue")
     (update-bb-dep 'nbb/nbb {:git/sha sha :git/tag tag})
     (update-bb-dep 'nbb.build/nbb.build {:git/sha sha})
     (println "Update nbb to" tag)
     (shell "git commit -m" (str "Update nbb to " tag) "."))}

  publish
  {:doc "Update package.json, git tag and push to CI for release"
   :task
   (let [version (or (first *command-line-args*)
                     (throw (ex-info "No version given" {})))]
     (shell "npm version" version)
     (shell "git push --atomic origin main" (str "v" version)))}

  ;; Publish tasks copied from nbb
  current-tag (->> (shell {:out :string} "git describe")
                   :out
                   str/trim
                   (re-matches (re-pattern "^v\\d+\\.\\d+\\.\\d+")))

  current-branch (->> (shell {:out :string} "git rev-parse --abbrev-ref HEAD")
                      :out
                      str/trim)

  ci:is-release {:depends [current-tag current-branch]
                 :task (and current-tag (= "main" current-branch))}

  ci:publish {:doc "Publishes release build to npm"
              :depends [ci:is-release]
              :task
              (if ci:is-release
                (do
                  (println "Releasing")
                  (run 'release)
                  (shell "npm publish --access public"))
                (println "Skipping release."))}}}
